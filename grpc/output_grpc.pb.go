// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: output.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GaywayClient is the client API for Gayway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GaywayClient interface {
	Application(ctx context.Context, in *ApplicationInput, opts ...grpc.CallOption) (*ApplicationOutput, error)
	Applications(ctx context.Context, in *ApplicationsInput, opts ...grpc.CallOption) (*ApplicationsOutput, error)
	ApplicationCreate(ctx context.Context, in *ApplicationCreateInput, opts ...grpc.CallOption) (*ApplicationCreateOutput, error)
	ApplicationUpdate(ctx context.Context, in *ApplicationUpdateInput, opts ...grpc.CallOption) (*ApplicationUpdateOutput, error)
	ApplicationDelete(ctx context.Context, in *ApplicationDeleteInput, opts ...grpc.CallOption) (*ApplicationDeleteOutput, error)
	ApplicationAssets(ctx context.Context, in *ApplicationAssetsInput, opts ...grpc.CallOption) (*ApplicationAssetsOutput, error)
	ApplicationBotCreate(ctx context.Context, in *ApplicationBotCreateInput, opts ...grpc.CallOption) (*ApplicationBotCreateOutput, error)
	Request(ctx context.Context, in *RequestInput, opts ...grpc.CallOption) (*RequestOutput, error)
	RequestWithBucketID(ctx context.Context, in *RequestWithBucketIDInput, opts ...grpc.CallOption) (*RequestWithBucketIDOutput, error)
	User(ctx context.Context, in *UserInput, opts ...grpc.CallOption) (*UserOutput, error)
	UserAvatar(ctx context.Context, in *UserAvatarInput, opts ...grpc.CallOption) (*UserAvatarOutput, error)
	UserAvatarDecode(ctx context.Context, in *UserAvatarDecodeInput, opts ...grpc.CallOption) (*UserAvatarDecodeOutput, error)
	UserUpdate(ctx context.Context, in *UserUpdateInput, opts ...grpc.CallOption) (*UserUpdateOutput, error)
	UserConnections(ctx context.Context, in *UserConnectionsInput, opts ...grpc.CallOption) (*UserConnectionsOutput, error)
	UserChannelCreate(ctx context.Context, in *UserChannelCreateInput, opts ...grpc.CallOption) (*UserChannelCreateOutput, error)
	UserGuildMember(ctx context.Context, in *UserGuildMemberInput, opts ...grpc.CallOption) (*UserGuildMemberOutput, error)
	UserGuilds(ctx context.Context, in *UserGuildsInput, opts ...grpc.CallOption) (*UserGuildsOutput, error)
	UserChannelPermissions(ctx context.Context, in *UserChannelPermissionsInput, opts ...grpc.CallOption) (*UserChannelPermissionsOutput, error)
	Guild(ctx context.Context, in *GuildInput, opts ...grpc.CallOption) (*GuildOutput, error)
	GuildWithCounts(ctx context.Context, in *GuildWithCountsInput, opts ...grpc.CallOption) (*GuildWithCountsOutput, error)
	GuildPreview(ctx context.Context, in *GuildPreviewInput, opts ...grpc.CallOption) (*GuildPreviewOutput, error)
	GuildCreate(ctx context.Context, in *GuildCreateInput, opts ...grpc.CallOption) (*GuildCreateOutput, error)
	GuildEdit(ctx context.Context, in *GuildEditInput, opts ...grpc.CallOption) (*GuildEditOutput, error)
	GuildDelete(ctx context.Context, in *GuildDeleteInput, opts ...grpc.CallOption) (*GuildDeleteOutput, error)
	GuildLeave(ctx context.Context, in *GuildLeaveInput, opts ...grpc.CallOption) (*GuildLeaveOutput, error)
	GuildBans(ctx context.Context, in *GuildBansInput, opts ...grpc.CallOption) (*GuildBansOutput, error)
	GuildBanCreate(ctx context.Context, in *GuildBanCreateInput, opts ...grpc.CallOption) (*GuildBanCreateOutput, error)
	GuildBan(ctx context.Context, in *GuildBanInput, opts ...grpc.CallOption) (*GuildBanOutput, error)
	GuildBanCreateWithReason(ctx context.Context, in *GuildBanCreateWithReasonInput, opts ...grpc.CallOption) (*GuildBanCreateWithReasonOutput, error)
	GuildBanDelete(ctx context.Context, in *GuildBanDeleteInput, opts ...grpc.CallOption) (*GuildBanDeleteOutput, error)
	GuildMembers(ctx context.Context, in *GuildMembersInput, opts ...grpc.CallOption) (*GuildMembersOutput, error)
	GuildMembersSearch(ctx context.Context, in *GuildMembersSearchInput, opts ...grpc.CallOption) (*GuildMembersSearchOutput, error)
	GuildMember(ctx context.Context, in *GuildMemberInput, opts ...grpc.CallOption) (*GuildMemberOutput, error)
	GuildMemberAdd(ctx context.Context, in *GuildMemberAddInput, opts ...grpc.CallOption) (*GuildMemberAddOutput, error)
	GuildMemberDelete(ctx context.Context, in *GuildMemberDeleteInput, opts ...grpc.CallOption) (*GuildMemberDeleteOutput, error)
	GuildMemberDeleteWithReason(ctx context.Context, in *GuildMemberDeleteWithReasonInput, opts ...grpc.CallOption) (*GuildMemberDeleteWithReasonOutput, error)
	GuildMemberEdit(ctx context.Context, in *GuildMemberEditInput, opts ...grpc.CallOption) (*GuildMemberEditOutput, error)
	GuildMemberEditComplex(ctx context.Context, in *GuildMemberEditComplexInput, opts ...grpc.CallOption) (*GuildMemberEditComplexOutput, error)
	GuildMemberMove(ctx context.Context, in *GuildMemberMoveInput, opts ...grpc.CallOption) (*GuildMemberMoveOutput, error)
	GuildMemberNickname(ctx context.Context, in *GuildMemberNicknameInput, opts ...grpc.CallOption) (*GuildMemberNicknameOutput, error)
	GuildMemberMute(ctx context.Context, in *GuildMemberMuteInput, opts ...grpc.CallOption) (*GuildMemberMuteOutput, error)
	GuildMemberTimeout(ctx context.Context, in *GuildMemberTimeoutInput, opts ...grpc.CallOption) (*GuildMemberTimeoutOutput, error)
	GuildMemberDeafen(ctx context.Context, in *GuildMemberDeafenInput, opts ...grpc.CallOption) (*GuildMemberDeafenOutput, error)
	GuildMemberRoleAdd(ctx context.Context, in *GuildMemberRoleAddInput, opts ...grpc.CallOption) (*GuildMemberRoleAddOutput, error)
	GuildMemberRoleRemove(ctx context.Context, in *GuildMemberRoleRemoveInput, opts ...grpc.CallOption) (*GuildMemberRoleRemoveOutput, error)
	GuildChannels(ctx context.Context, in *GuildChannelsInput, opts ...grpc.CallOption) (*GuildChannelsOutput, error)
	GuildChannelCreateComplex(ctx context.Context, in *GuildChannelCreateComplexInput, opts ...grpc.CallOption) (*GuildChannelCreateComplexOutput, error)
	GuildChannelCreate(ctx context.Context, in *GuildChannelCreateInput, opts ...grpc.CallOption) (*GuildChannelCreateOutput, error)
	GuildChannelsReorder(ctx context.Context, in *GuildChannelsReorderInput, opts ...grpc.CallOption) (*GuildChannelsReorderOutput, error)
	GuildInvites(ctx context.Context, in *GuildInvitesInput, opts ...grpc.CallOption) (*GuildInvitesOutput, error)
	GuildRoles(ctx context.Context, in *GuildRolesInput, opts ...grpc.CallOption) (*GuildRolesOutput, error)
	GuildRoleCreate(ctx context.Context, in *GuildRoleCreateInput, opts ...grpc.CallOption) (*GuildRoleCreateOutput, error)
	GuildRoleEdit(ctx context.Context, in *GuildRoleEditInput, opts ...grpc.CallOption) (*GuildRoleEditOutput, error)
	GuildRoleReorder(ctx context.Context, in *GuildRoleReorderInput, opts ...grpc.CallOption) (*GuildRoleReorderOutput, error)
	GuildRoleDelete(ctx context.Context, in *GuildRoleDeleteInput, opts ...grpc.CallOption) (*GuildRoleDeleteOutput, error)
	GuildPruneCount(ctx context.Context, in *GuildPruneCountInput, opts ...grpc.CallOption) (*GuildPruneCountOutput, error)
	GuildPrune(ctx context.Context, in *GuildPruneInput, opts ...grpc.CallOption) (*GuildPruneOutput, error)
	GuildIntegrations(ctx context.Context, in *GuildIntegrationsInput, opts ...grpc.CallOption) (*GuildIntegrationsOutput, error)
	GuildIntegrationCreate(ctx context.Context, in *GuildIntegrationCreateInput, opts ...grpc.CallOption) (*GuildIntegrationCreateOutput, error)
	GuildIntegrationEdit(ctx context.Context, in *GuildIntegrationEditInput, opts ...grpc.CallOption) (*GuildIntegrationEditOutput, error)
	GuildIntegrationDelete(ctx context.Context, in *GuildIntegrationDeleteInput, opts ...grpc.CallOption) (*GuildIntegrationDeleteOutput, error)
	GuildIcon(ctx context.Context, in *GuildIconInput, opts ...grpc.CallOption) (*GuildIconOutput, error)
	GuildSplash(ctx context.Context, in *GuildSplashInput, opts ...grpc.CallOption) (*GuildSplashOutput, error)
	GuildEmbed(ctx context.Context, in *GuildEmbedInput, opts ...grpc.CallOption) (*GuildEmbedOutput, error)
	GuildEmbedEdit(ctx context.Context, in *GuildEmbedEditInput, opts ...grpc.CallOption) (*GuildEmbedEditOutput, error)
	GuildAuditLog(ctx context.Context, in *GuildAuditLogInput, opts ...grpc.CallOption) (*GuildAuditLogOutput, error)
	GuildEmojis(ctx context.Context, in *GuildEmojisInput, opts ...grpc.CallOption) (*GuildEmojisOutput, error)
	GuildEmoji(ctx context.Context, in *GuildEmojiInput, opts ...grpc.CallOption) (*GuildEmojiOutput, error)
	GuildEmojiCreate(ctx context.Context, in *GuildEmojiCreateInput, opts ...grpc.CallOption) (*GuildEmojiCreateOutput, error)
	GuildEmojiEdit(ctx context.Context, in *GuildEmojiEditInput, opts ...grpc.CallOption) (*GuildEmojiEditOutput, error)
	GuildEmojiDelete(ctx context.Context, in *GuildEmojiDeleteInput, opts ...grpc.CallOption) (*GuildEmojiDeleteOutput, error)
	GuildTemplate(ctx context.Context, in *GuildTemplateInput, opts ...grpc.CallOption) (*GuildTemplateOutput, error)
	GuildCreateWithTemplate(ctx context.Context, in *GuildCreateWithTemplateInput, opts ...grpc.CallOption) (*GuildCreateWithTemplateOutput, error)
	GuildTemplates(ctx context.Context, in *GuildTemplatesInput, opts ...grpc.CallOption) (*GuildTemplatesOutput, error)
	GuildTemplateCreate(ctx context.Context, in *GuildTemplateCreateInput, opts ...grpc.CallOption) (*GuildTemplateCreateOutput, error)
	GuildTemplateSync(ctx context.Context, in *GuildTemplateSyncInput, opts ...grpc.CallOption) (*GuildTemplateSyncOutput, error)
	GuildTemplateEdit(ctx context.Context, in *GuildTemplateEditInput, opts ...grpc.CallOption) (*GuildTemplateEditOutput, error)
	GuildTemplateDelete(ctx context.Context, in *GuildTemplateDeleteInput, opts ...grpc.CallOption) (*GuildTemplateDeleteOutput, error)
	Channel(ctx context.Context, in *ChannelInput, opts ...grpc.CallOption) (*ChannelOutput, error)
	ChannelEdit(ctx context.Context, in *ChannelEditInput, opts ...grpc.CallOption) (*ChannelEditOutput, error)
	ChannelEditComplex(ctx context.Context, in *ChannelEditComplexInput, opts ...grpc.CallOption) (*ChannelEditComplexOutput, error)
	ChannelDelete(ctx context.Context, in *ChannelDeleteInput, opts ...grpc.CallOption) (*ChannelDeleteOutput, error)
	ChannelTyping(ctx context.Context, in *ChannelTypingInput, opts ...grpc.CallOption) (*ChannelTypingOutput, error)
	ChannelMessages(ctx context.Context, in *ChannelMessagesInput, opts ...grpc.CallOption) (*ChannelMessagesOutput, error)
	ChannelMessage(ctx context.Context, in *ChannelMessageInput, opts ...grpc.CallOption) (*ChannelMessageOutput, error)
	ChannelMessageSend(ctx context.Context, in *ChannelMessageSendInput, opts ...grpc.CallOption) (*ChannelMessageSendOutput, error)
	ChannelMessageSendComplex(ctx context.Context, in *ChannelMessageSendComplexInput, opts ...grpc.CallOption) (*ChannelMessageSendComplexOutput, error)
	ChannelMessageSendTTS(ctx context.Context, in *ChannelMessageSendTTSInput, opts ...grpc.CallOption) (*ChannelMessageSendTTSOutput, error)
	ChannelMessageSendEmbed(ctx context.Context, in *ChannelMessageSendEmbedInput, opts ...grpc.CallOption) (*ChannelMessageSendEmbedOutput, error)
	ChannelMessageSendEmbeds(ctx context.Context, in *ChannelMessageSendEmbedsInput, opts ...grpc.CallOption) (*ChannelMessageSendEmbedsOutput, error)
	ChannelMessageSendReply(ctx context.Context, in *ChannelMessageSendReplyInput, opts ...grpc.CallOption) (*ChannelMessageSendReplyOutput, error)
	ChannelMessageSendEmbedReply(ctx context.Context, in *ChannelMessageSendEmbedReplyInput, opts ...grpc.CallOption) (*ChannelMessageSendEmbedReplyOutput, error)
	ChannelMessageSendEmbedsReply(ctx context.Context, in *ChannelMessageSendEmbedsReplyInput, opts ...grpc.CallOption) (*ChannelMessageSendEmbedsReplyOutput, error)
	ChannelMessageEdit(ctx context.Context, in *ChannelMessageEditInput, opts ...grpc.CallOption) (*ChannelMessageEditOutput, error)
	ChannelMessageEditComplex(ctx context.Context, in *ChannelMessageEditComplexInput, opts ...grpc.CallOption) (*ChannelMessageEditComplexOutput, error)
	ChannelMessageEditEmbed(ctx context.Context, in *ChannelMessageEditEmbedInput, opts ...grpc.CallOption) (*ChannelMessageEditEmbedOutput, error)
	ChannelMessageEditEmbeds(ctx context.Context, in *ChannelMessageEditEmbedsInput, opts ...grpc.CallOption) (*ChannelMessageEditEmbedsOutput, error)
	ChannelMessageDelete(ctx context.Context, in *ChannelMessageDeleteInput, opts ...grpc.CallOption) (*ChannelMessageDeleteOutput, error)
	ChannelMessagesBulkDelete(ctx context.Context, in *ChannelMessagesBulkDeleteInput, opts ...grpc.CallOption) (*ChannelMessagesBulkDeleteOutput, error)
	ChannelMessagePin(ctx context.Context, in *ChannelMessagePinInput, opts ...grpc.CallOption) (*ChannelMessagePinOutput, error)
	ChannelMessageUnpin(ctx context.Context, in *ChannelMessageUnpinInput, opts ...grpc.CallOption) (*ChannelMessageUnpinOutput, error)
	ChannelMessagesPinned(ctx context.Context, in *ChannelMessagesPinnedInput, opts ...grpc.CallOption) (*ChannelMessagesPinnedOutput, error)
	ChannelFileSend(ctx context.Context, in *ChannelFileSendInput, opts ...grpc.CallOption) (*ChannelFileSendOutput, error)
	ChannelFileSendWithMessage(ctx context.Context, in *ChannelFileSendWithMessageInput, opts ...grpc.CallOption) (*ChannelFileSendWithMessageOutput, error)
	ChannelInvites(ctx context.Context, in *ChannelInvitesInput, opts ...grpc.CallOption) (*ChannelInvitesOutput, error)
	ChannelInviteCreate(ctx context.Context, in *ChannelInviteCreateInput, opts ...grpc.CallOption) (*ChannelInviteCreateOutput, error)
	ChannelPermissionSet(ctx context.Context, in *ChannelPermissionSetInput, opts ...grpc.CallOption) (*ChannelPermissionSetOutput, error)
	ChannelPermissionDelete(ctx context.Context, in *ChannelPermissionDeleteInput, opts ...grpc.CallOption) (*ChannelPermissionDeleteOutput, error)
	ChannelMessageCrosspost(ctx context.Context, in *ChannelMessageCrosspostInput, opts ...grpc.CallOption) (*ChannelMessageCrosspostOutput, error)
	ChannelNewsFollow(ctx context.Context, in *ChannelNewsFollowInput, opts ...grpc.CallOption) (*ChannelNewsFollowOutput, error)
	Invite(ctx context.Context, in *InviteInput, opts ...grpc.CallOption) (*InviteOutput, error)
	InviteWithCounts(ctx context.Context, in *InviteWithCountsInput, opts ...grpc.CallOption) (*InviteWithCountsOutput, error)
	InviteComplex(ctx context.Context, in *InviteComplexInput, opts ...grpc.CallOption) (*InviteComplexOutput, error)
	InviteDelete(ctx context.Context, in *InviteDeleteInput, opts ...grpc.CallOption) (*InviteDeleteOutput, error)
	InviteAccept(ctx context.Context, in *InviteAcceptInput, opts ...grpc.CallOption) (*InviteAcceptOutput, error)
	VoiceRegions(ctx context.Context, in *VoiceRegionsInput, opts ...grpc.CallOption) (*VoiceRegionsOutput, error)
	Gateway(ctx context.Context, in *GatewayInput, opts ...grpc.CallOption) (*GatewayOutput, error)
	GatewayBot(ctx context.Context, in *GatewayBotInput, opts ...grpc.CallOption) (*GatewayBotOutput, error)
	WebhookCreate(ctx context.Context, in *WebhookCreateInput, opts ...grpc.CallOption) (*WebhookCreateOutput, error)
	ChannelWebhooks(ctx context.Context, in *ChannelWebhooksInput, opts ...grpc.CallOption) (*ChannelWebhooksOutput, error)
	GuildWebhooks(ctx context.Context, in *GuildWebhooksInput, opts ...grpc.CallOption) (*GuildWebhooksOutput, error)
	Webhook(ctx context.Context, in *WebhookInput, opts ...grpc.CallOption) (*WebhookOutput, error)
	WebhookWithToken(ctx context.Context, in *WebhookWithTokenInput, opts ...grpc.CallOption) (*WebhookWithTokenOutput, error)
	WebhookEdit(ctx context.Context, in *WebhookEditInput, opts ...grpc.CallOption) (*WebhookEditOutput, error)
	WebhookEditWithToken(ctx context.Context, in *WebhookEditWithTokenInput, opts ...grpc.CallOption) (*WebhookEditWithTokenOutput, error)
	WebhookDelete(ctx context.Context, in *WebhookDeleteInput, opts ...grpc.CallOption) (*WebhookDeleteOutput, error)
	WebhookDeleteWithToken(ctx context.Context, in *WebhookDeleteWithTokenInput, opts ...grpc.CallOption) (*WebhookDeleteWithTokenOutput, error)
	WebhookExecute(ctx context.Context, in *WebhookExecuteInput, opts ...grpc.CallOption) (*WebhookExecuteOutput, error)
	WebhookThreadExecute(ctx context.Context, in *WebhookThreadExecuteInput, opts ...grpc.CallOption) (*WebhookThreadExecuteOutput, error)
	WebhookMessage(ctx context.Context, in *WebhookMessageInput, opts ...grpc.CallOption) (*WebhookMessageOutput, error)
	WebhookMessageEdit(ctx context.Context, in *WebhookMessageEditInput, opts ...grpc.CallOption) (*WebhookMessageEditOutput, error)
	WebhookMessageDelete(ctx context.Context, in *WebhookMessageDeleteInput, opts ...grpc.CallOption) (*WebhookMessageDeleteOutput, error)
	MessageReactionAdd(ctx context.Context, in *MessageReactionAddInput, opts ...grpc.CallOption) (*MessageReactionAddOutput, error)
	MessageReactionRemove(ctx context.Context, in *MessageReactionRemoveInput, opts ...grpc.CallOption) (*MessageReactionRemoveOutput, error)
	MessageReactionsRemoveAll(ctx context.Context, in *MessageReactionsRemoveAllInput, opts ...grpc.CallOption) (*MessageReactionsRemoveAllOutput, error)
	MessageReactionsRemoveEmoji(ctx context.Context, in *MessageReactionsRemoveEmojiInput, opts ...grpc.CallOption) (*MessageReactionsRemoveEmojiOutput, error)
	MessageReactions(ctx context.Context, in *MessageReactionsInput, opts ...grpc.CallOption) (*MessageReactionsOutput, error)
	MessageThreadStartComplex(ctx context.Context, in *MessageThreadStartComplexInput, opts ...grpc.CallOption) (*MessageThreadStartComplexOutput, error)
	MessageThreadStart(ctx context.Context, in *MessageThreadStartInput, opts ...grpc.CallOption) (*MessageThreadStartOutput, error)
	ThreadStartComplex(ctx context.Context, in *ThreadStartComplexInput, opts ...grpc.CallOption) (*ThreadStartComplexOutput, error)
	ThreadStart(ctx context.Context, in *ThreadStartInput, opts ...grpc.CallOption) (*ThreadStartOutput, error)
	ForumThreadStartComplex(ctx context.Context, in *ForumThreadStartComplexInput, opts ...grpc.CallOption) (*ForumThreadStartComplexOutput, error)
	ForumThreadStart(ctx context.Context, in *ForumThreadStartInput, opts ...grpc.CallOption) (*ForumThreadStartOutput, error)
	ForumThreadStartEmbed(ctx context.Context, in *ForumThreadStartEmbedInput, opts ...grpc.CallOption) (*ForumThreadStartEmbedOutput, error)
	ForumThreadStartEmbeds(ctx context.Context, in *ForumThreadStartEmbedsInput, opts ...grpc.CallOption) (*ForumThreadStartEmbedsOutput, error)
	ThreadJoin(ctx context.Context, in *ThreadJoinInput, opts ...grpc.CallOption) (*ThreadJoinOutput, error)
	ThreadLeave(ctx context.Context, in *ThreadLeaveInput, opts ...grpc.CallOption) (*ThreadLeaveOutput, error)
	ThreadMemberAdd(ctx context.Context, in *ThreadMemberAddInput, opts ...grpc.CallOption) (*ThreadMemberAddOutput, error)
	ThreadMemberRemove(ctx context.Context, in *ThreadMemberRemoveInput, opts ...grpc.CallOption) (*ThreadMemberRemoveOutput, error)
	ThreadMember(ctx context.Context, in *ThreadMemberInput, opts ...grpc.CallOption) (*ThreadMemberOutput, error)
	ThreadMembers(ctx context.Context, in *ThreadMembersInput, opts ...grpc.CallOption) (*ThreadMembersOutput, error)
	ThreadsActive(ctx context.Context, in *ThreadsActiveInput, opts ...grpc.CallOption) (*ThreadsActiveOutput, error)
	GuildThreadsActive(ctx context.Context, in *GuildThreadsActiveInput, opts ...grpc.CallOption) (*GuildThreadsActiveOutput, error)
	ThreadsArchived(ctx context.Context, in *ThreadsArchivedInput, opts ...grpc.CallOption) (*ThreadsArchivedOutput, error)
	ThreadsPrivateArchived(ctx context.Context, in *ThreadsPrivateArchivedInput, opts ...grpc.CallOption) (*ThreadsPrivateArchivedOutput, error)
	ThreadsPrivateJoinedArchived(ctx context.Context, in *ThreadsPrivateJoinedArchivedInput, opts ...grpc.CallOption) (*ThreadsPrivateJoinedArchivedOutput, error)
	ApplicationCommandCreate(ctx context.Context, in *ApplicationCommandCreateInput, opts ...grpc.CallOption) (*ApplicationCommandCreateOutput, error)
	ApplicationCommandEdit(ctx context.Context, in *ApplicationCommandEditInput, opts ...grpc.CallOption) (*ApplicationCommandEditOutput, error)
	ApplicationCommandBulkOverwrite(ctx context.Context, in *ApplicationCommandBulkOverwriteInput, opts ...grpc.CallOption) (*ApplicationCommandBulkOverwriteOutput, error)
	ApplicationCommandDelete(ctx context.Context, in *ApplicationCommandDeleteInput, opts ...grpc.CallOption) (*ApplicationCommandDeleteOutput, error)
	ApplicationCommand(ctx context.Context, in *ApplicationCommandInput, opts ...grpc.CallOption) (*ApplicationCommandOutput, error)
	ApplicationCommands(ctx context.Context, in *ApplicationCommandsInput, opts ...grpc.CallOption) (*ApplicationCommandsOutput, error)
	GuildApplicationCommandsPermissions(ctx context.Context, in *GuildApplicationCommandsPermissionsInput, opts ...grpc.CallOption) (*GuildApplicationCommandsPermissionsOutput, error)
	ApplicationCommandPermissions(ctx context.Context, in *ApplicationCommandPermissionsInput, opts ...grpc.CallOption) (*ApplicationCommandPermissionsOutput, error)
	ApplicationCommandPermissionsEdit(ctx context.Context, in *ApplicationCommandPermissionsEditInput, opts ...grpc.CallOption) (*ApplicationCommandPermissionsEditOutput, error)
	ApplicationCommandPermissionsBatchEdit(ctx context.Context, in *ApplicationCommandPermissionsBatchEditInput, opts ...grpc.CallOption) (*ApplicationCommandPermissionsBatchEditOutput, error)
	InteractionRespond(ctx context.Context, in *InteractionRespondInput, opts ...grpc.CallOption) (*InteractionRespondOutput, error)
	InteractionResponse(ctx context.Context, in *InteractionResponseInput, opts ...grpc.CallOption) (*InteractionResponseOutput, error)
	InteractionResponseEdit(ctx context.Context, in *InteractionResponseEditInput, opts ...grpc.CallOption) (*InteractionResponseEditOutput, error)
	InteractionResponseDelete(ctx context.Context, in *InteractionResponseDeleteInput, opts ...grpc.CallOption) (*InteractionResponseDeleteOutput, error)
	FollowupMessageCreate(ctx context.Context, in *FollowupMessageCreateInput, opts ...grpc.CallOption) (*FollowupMessageCreateOutput, error)
	FollowupMessageEdit(ctx context.Context, in *FollowupMessageEditInput, opts ...grpc.CallOption) (*FollowupMessageEditOutput, error)
	FollowupMessageDelete(ctx context.Context, in *FollowupMessageDeleteInput, opts ...grpc.CallOption) (*FollowupMessageDeleteOutput, error)
	StageInstanceCreate(ctx context.Context, in *StageInstanceCreateInput, opts ...grpc.CallOption) (*StageInstanceCreateOutput, error)
	StageInstance(ctx context.Context, in *StageInstanceInput, opts ...grpc.CallOption) (*StageInstanceOutput, error)
	StageInstanceEdit(ctx context.Context, in *StageInstanceEditInput, opts ...grpc.CallOption) (*StageInstanceEditOutput, error)
	StageInstanceDelete(ctx context.Context, in *StageInstanceDeleteInput, opts ...grpc.CallOption) (*StageInstanceDeleteOutput, error)
	GuildScheduledEvents(ctx context.Context, in *GuildScheduledEventsInput, opts ...grpc.CallOption) (*GuildScheduledEventsOutput, error)
	GuildScheduledEvent(ctx context.Context, in *GuildScheduledEventInput, opts ...grpc.CallOption) (*GuildScheduledEventOutput, error)
	GuildScheduledEventCreate(ctx context.Context, in *GuildScheduledEventCreateInput, opts ...grpc.CallOption) (*GuildScheduledEventCreateOutput, error)
	GuildScheduledEventEdit(ctx context.Context, in *GuildScheduledEventEditInput, opts ...grpc.CallOption) (*GuildScheduledEventEditOutput, error)
	GuildScheduledEventDelete(ctx context.Context, in *GuildScheduledEventDeleteInput, opts ...grpc.CallOption) (*GuildScheduledEventDeleteOutput, error)
	GuildScheduledEventUsers(ctx context.Context, in *GuildScheduledEventUsersInput, opts ...grpc.CallOption) (*GuildScheduledEventUsersOutput, error)
	AutoModerationRules(ctx context.Context, in *AutoModerationRulesInput, opts ...grpc.CallOption) (*AutoModerationRulesOutput, error)
	AutoModerationRule(ctx context.Context, in *AutoModerationRuleInput, opts ...grpc.CallOption) (*AutoModerationRuleOutput, error)
	AutoModerationRuleCreate(ctx context.Context, in *AutoModerationRuleCreateInput, opts ...grpc.CallOption) (*AutoModerationRuleCreateOutput, error)
	AutoModerationRuleEdit(ctx context.Context, in *AutoModerationRuleEditInput, opts ...grpc.CallOption) (*AutoModerationRuleEditOutput, error)
	AutoModerationRuleDelete(ctx context.Context, in *AutoModerationRuleDeleteInput, opts ...grpc.CallOption) (*AutoModerationRuleDeleteOutput, error)
	ApplicationRoleConnectionMetadata(ctx context.Context, in *ApplicationRoleConnectionMetadataInput, opts ...grpc.CallOption) (*ApplicationRoleConnectionMetadataOutput, error)
	ApplicationRoleConnectionMetadataUpdate(ctx context.Context, in *ApplicationRoleConnectionMetadataUpdateInput, opts ...grpc.CallOption) (*ApplicationRoleConnectionMetadataUpdateOutput, error)
	UserApplicationRoleConnection(ctx context.Context, in *UserApplicationRoleConnectionInput, opts ...grpc.CallOption) (*UserApplicationRoleConnectionOutput, error)
	UserApplicationRoleConnectionUpdate(ctx context.Context, in *UserApplicationRoleConnectionUpdateInput, opts ...grpc.CallOption) (*UserApplicationRoleConnectionUpdateOutput, error)
	HeartbeatLatency(ctx context.Context, in *HeartbeatLatencyInput, opts ...grpc.CallOption) (*HeartbeatLatencyOutput, error)
	UpdateGameStatus(ctx context.Context, in *UpdateGameStatusInput, opts ...grpc.CallOption) (*UpdateGameStatusOutput, error)
	UpdateWatchStatus(ctx context.Context, in *UpdateWatchStatusInput, opts ...grpc.CallOption) (*UpdateWatchStatusOutput, error)
	UpdateStreamingStatus(ctx context.Context, in *UpdateStreamingStatusInput, opts ...grpc.CallOption) (*UpdateStreamingStatusOutput, error)
	UpdateListeningStatus(ctx context.Context, in *UpdateListeningStatusInput, opts ...grpc.CallOption) (*UpdateListeningStatusOutput, error)
	UpdateStatusComplex(ctx context.Context, in *UpdateStatusComplexInput, opts ...grpc.CallOption) (*UpdateStatusComplexOutput, error)
	RequestGuildMembers(ctx context.Context, in *RequestGuildMembersInput, opts ...grpc.CallOption) (*RequestGuildMembersOutput, error)
	RequestGuildMembersList(ctx context.Context, in *RequestGuildMembersListInput, opts ...grpc.CallOption) (*RequestGuildMembersListOutput, error)
	RequestGuildMembersBatch(ctx context.Context, in *RequestGuildMembersBatchInput, opts ...grpc.CallOption) (*RequestGuildMembersBatchOutput, error)
	RequestGuildMembersBatchList(ctx context.Context, in *RequestGuildMembersBatchListInput, opts ...grpc.CallOption) (*RequestGuildMembersBatchListOutput, error)
	ChannelVoiceJoinManual(ctx context.Context, in *ChannelVoiceJoinManualInput, opts ...grpc.CallOption) (*ChannelVoiceJoinManualOutput, error)
}

type gaywayClient struct {
	cc grpc.ClientConnInterface
}

func NewGaywayClient(cc grpc.ClientConnInterface) GaywayClient {
	return &gaywayClient{cc}
}

func (c *gaywayClient) Application(ctx context.Context, in *ApplicationInput, opts ...grpc.CallOption) (*ApplicationOutput, error) {
	out := new(ApplicationOutput)
	err := c.cc.Invoke(ctx, "/Gayway/Application", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) Applications(ctx context.Context, in *ApplicationsInput, opts ...grpc.CallOption) (*ApplicationsOutput, error) {
	out := new(ApplicationsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/Applications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationCreate(ctx context.Context, in *ApplicationCreateInput, opts ...grpc.CallOption) (*ApplicationCreateOutput, error) {
	out := new(ApplicationCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationUpdate(ctx context.Context, in *ApplicationUpdateInput, opts ...grpc.CallOption) (*ApplicationUpdateOutput, error) {
	out := new(ApplicationUpdateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationDelete(ctx context.Context, in *ApplicationDeleteInput, opts ...grpc.CallOption) (*ApplicationDeleteOutput, error) {
	out := new(ApplicationDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationAssets(ctx context.Context, in *ApplicationAssetsInput, opts ...grpc.CallOption) (*ApplicationAssetsOutput, error) {
	out := new(ApplicationAssetsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationBotCreate(ctx context.Context, in *ApplicationBotCreateInput, opts ...grpc.CallOption) (*ApplicationBotCreateOutput, error) {
	out := new(ApplicationBotCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationBotCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) Request(ctx context.Context, in *RequestInput, opts ...grpc.CallOption) (*RequestOutput, error) {
	out := new(RequestOutput)
	err := c.cc.Invoke(ctx, "/Gayway/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) RequestWithBucketID(ctx context.Context, in *RequestWithBucketIDInput, opts ...grpc.CallOption) (*RequestWithBucketIDOutput, error) {
	out := new(RequestWithBucketIDOutput)
	err := c.cc.Invoke(ctx, "/Gayway/RequestWithBucketID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) User(ctx context.Context, in *UserInput, opts ...grpc.CallOption) (*UserOutput, error) {
	out := new(UserOutput)
	err := c.cc.Invoke(ctx, "/Gayway/User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UserAvatar(ctx context.Context, in *UserAvatarInput, opts ...grpc.CallOption) (*UserAvatarOutput, error) {
	out := new(UserAvatarOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UserAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UserAvatarDecode(ctx context.Context, in *UserAvatarDecodeInput, opts ...grpc.CallOption) (*UserAvatarDecodeOutput, error) {
	out := new(UserAvatarDecodeOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UserAvatarDecode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UserUpdate(ctx context.Context, in *UserUpdateInput, opts ...grpc.CallOption) (*UserUpdateOutput, error) {
	out := new(UserUpdateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UserConnections(ctx context.Context, in *UserConnectionsInput, opts ...grpc.CallOption) (*UserConnectionsOutput, error) {
	out := new(UserConnectionsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UserConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UserChannelCreate(ctx context.Context, in *UserChannelCreateInput, opts ...grpc.CallOption) (*UserChannelCreateOutput, error) {
	out := new(UserChannelCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UserChannelCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UserGuildMember(ctx context.Context, in *UserGuildMemberInput, opts ...grpc.CallOption) (*UserGuildMemberOutput, error) {
	out := new(UserGuildMemberOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UserGuildMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UserGuilds(ctx context.Context, in *UserGuildsInput, opts ...grpc.CallOption) (*UserGuildsOutput, error) {
	out := new(UserGuildsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UserGuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UserChannelPermissions(ctx context.Context, in *UserChannelPermissionsInput, opts ...grpc.CallOption) (*UserChannelPermissionsOutput, error) {
	out := new(UserChannelPermissionsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UserChannelPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) Guild(ctx context.Context, in *GuildInput, opts ...grpc.CallOption) (*GuildOutput, error) {
	out := new(GuildOutput)
	err := c.cc.Invoke(ctx, "/Gayway/Guild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildWithCounts(ctx context.Context, in *GuildWithCountsInput, opts ...grpc.CallOption) (*GuildWithCountsOutput, error) {
	out := new(GuildWithCountsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildWithCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildPreview(ctx context.Context, in *GuildPreviewInput, opts ...grpc.CallOption) (*GuildPreviewOutput, error) {
	out := new(GuildPreviewOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildCreate(ctx context.Context, in *GuildCreateInput, opts ...grpc.CallOption) (*GuildCreateOutput, error) {
	out := new(GuildCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildEdit(ctx context.Context, in *GuildEditInput, opts ...grpc.CallOption) (*GuildEditOutput, error) {
	out := new(GuildEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildDelete(ctx context.Context, in *GuildDeleteInput, opts ...grpc.CallOption) (*GuildDeleteOutput, error) {
	out := new(GuildDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildLeave(ctx context.Context, in *GuildLeaveInput, opts ...grpc.CallOption) (*GuildLeaveOutput, error) {
	out := new(GuildLeaveOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildBans(ctx context.Context, in *GuildBansInput, opts ...grpc.CallOption) (*GuildBansOutput, error) {
	out := new(GuildBansOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildBans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildBanCreate(ctx context.Context, in *GuildBanCreateInput, opts ...grpc.CallOption) (*GuildBanCreateOutput, error) {
	out := new(GuildBanCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildBanCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildBan(ctx context.Context, in *GuildBanInput, opts ...grpc.CallOption) (*GuildBanOutput, error) {
	out := new(GuildBanOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildBanCreateWithReason(ctx context.Context, in *GuildBanCreateWithReasonInput, opts ...grpc.CallOption) (*GuildBanCreateWithReasonOutput, error) {
	out := new(GuildBanCreateWithReasonOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildBanCreateWithReason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildBanDelete(ctx context.Context, in *GuildBanDeleteInput, opts ...grpc.CallOption) (*GuildBanDeleteOutput, error) {
	out := new(GuildBanDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildBanDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMembers(ctx context.Context, in *GuildMembersInput, opts ...grpc.CallOption) (*GuildMembersOutput, error) {
	out := new(GuildMembersOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMembersSearch(ctx context.Context, in *GuildMembersSearchInput, opts ...grpc.CallOption) (*GuildMembersSearchOutput, error) {
	out := new(GuildMembersSearchOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMembersSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMember(ctx context.Context, in *GuildMemberInput, opts ...grpc.CallOption) (*GuildMemberOutput, error) {
	out := new(GuildMemberOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMemberAdd(ctx context.Context, in *GuildMemberAddInput, opts ...grpc.CallOption) (*GuildMemberAddOutput, error) {
	out := new(GuildMemberAddOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMemberAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMemberDelete(ctx context.Context, in *GuildMemberDeleteInput, opts ...grpc.CallOption) (*GuildMemberDeleteOutput, error) {
	out := new(GuildMemberDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMemberDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMemberDeleteWithReason(ctx context.Context, in *GuildMemberDeleteWithReasonInput, opts ...grpc.CallOption) (*GuildMemberDeleteWithReasonOutput, error) {
	out := new(GuildMemberDeleteWithReasonOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMemberDeleteWithReason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMemberEdit(ctx context.Context, in *GuildMemberEditInput, opts ...grpc.CallOption) (*GuildMemberEditOutput, error) {
	out := new(GuildMemberEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMemberEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMemberEditComplex(ctx context.Context, in *GuildMemberEditComplexInput, opts ...grpc.CallOption) (*GuildMemberEditComplexOutput, error) {
	out := new(GuildMemberEditComplexOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMemberEditComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMemberMove(ctx context.Context, in *GuildMemberMoveInput, opts ...grpc.CallOption) (*GuildMemberMoveOutput, error) {
	out := new(GuildMemberMoveOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMemberMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMemberNickname(ctx context.Context, in *GuildMemberNicknameInput, opts ...grpc.CallOption) (*GuildMemberNicknameOutput, error) {
	out := new(GuildMemberNicknameOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMemberNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMemberMute(ctx context.Context, in *GuildMemberMuteInput, opts ...grpc.CallOption) (*GuildMemberMuteOutput, error) {
	out := new(GuildMemberMuteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMemberMute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMemberTimeout(ctx context.Context, in *GuildMemberTimeoutInput, opts ...grpc.CallOption) (*GuildMemberTimeoutOutput, error) {
	out := new(GuildMemberTimeoutOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMemberTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMemberDeafen(ctx context.Context, in *GuildMemberDeafenInput, opts ...grpc.CallOption) (*GuildMemberDeafenOutput, error) {
	out := new(GuildMemberDeafenOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMemberDeafen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMemberRoleAdd(ctx context.Context, in *GuildMemberRoleAddInput, opts ...grpc.CallOption) (*GuildMemberRoleAddOutput, error) {
	out := new(GuildMemberRoleAddOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMemberRoleAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildMemberRoleRemove(ctx context.Context, in *GuildMemberRoleRemoveInput, opts ...grpc.CallOption) (*GuildMemberRoleRemoveOutput, error) {
	out := new(GuildMemberRoleRemoveOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildMemberRoleRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildChannels(ctx context.Context, in *GuildChannelsInput, opts ...grpc.CallOption) (*GuildChannelsOutput, error) {
	out := new(GuildChannelsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildChannelCreateComplex(ctx context.Context, in *GuildChannelCreateComplexInput, opts ...grpc.CallOption) (*GuildChannelCreateComplexOutput, error) {
	out := new(GuildChannelCreateComplexOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildChannelCreateComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildChannelCreate(ctx context.Context, in *GuildChannelCreateInput, opts ...grpc.CallOption) (*GuildChannelCreateOutput, error) {
	out := new(GuildChannelCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildChannelCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildChannelsReorder(ctx context.Context, in *GuildChannelsReorderInput, opts ...grpc.CallOption) (*GuildChannelsReorderOutput, error) {
	out := new(GuildChannelsReorderOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildChannelsReorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildInvites(ctx context.Context, in *GuildInvitesInput, opts ...grpc.CallOption) (*GuildInvitesOutput, error) {
	out := new(GuildInvitesOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildRoles(ctx context.Context, in *GuildRolesInput, opts ...grpc.CallOption) (*GuildRolesOutput, error) {
	out := new(GuildRolesOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildRoleCreate(ctx context.Context, in *GuildRoleCreateInput, opts ...grpc.CallOption) (*GuildRoleCreateOutput, error) {
	out := new(GuildRoleCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildRoleCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildRoleEdit(ctx context.Context, in *GuildRoleEditInput, opts ...grpc.CallOption) (*GuildRoleEditOutput, error) {
	out := new(GuildRoleEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildRoleEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildRoleReorder(ctx context.Context, in *GuildRoleReorderInput, opts ...grpc.CallOption) (*GuildRoleReorderOutput, error) {
	out := new(GuildRoleReorderOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildRoleReorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildRoleDelete(ctx context.Context, in *GuildRoleDeleteInput, opts ...grpc.CallOption) (*GuildRoleDeleteOutput, error) {
	out := new(GuildRoleDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildRoleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildPruneCount(ctx context.Context, in *GuildPruneCountInput, opts ...grpc.CallOption) (*GuildPruneCountOutput, error) {
	out := new(GuildPruneCountOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildPruneCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildPrune(ctx context.Context, in *GuildPruneInput, opts ...grpc.CallOption) (*GuildPruneOutput, error) {
	out := new(GuildPruneOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildPrune", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildIntegrations(ctx context.Context, in *GuildIntegrationsInput, opts ...grpc.CallOption) (*GuildIntegrationsOutput, error) {
	out := new(GuildIntegrationsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildIntegrationCreate(ctx context.Context, in *GuildIntegrationCreateInput, opts ...grpc.CallOption) (*GuildIntegrationCreateOutput, error) {
	out := new(GuildIntegrationCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildIntegrationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildIntegrationEdit(ctx context.Context, in *GuildIntegrationEditInput, opts ...grpc.CallOption) (*GuildIntegrationEditOutput, error) {
	out := new(GuildIntegrationEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildIntegrationEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildIntegrationDelete(ctx context.Context, in *GuildIntegrationDeleteInput, opts ...grpc.CallOption) (*GuildIntegrationDeleteOutput, error) {
	out := new(GuildIntegrationDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildIntegrationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildIcon(ctx context.Context, in *GuildIconInput, opts ...grpc.CallOption) (*GuildIconOutput, error) {
	out := new(GuildIconOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildSplash(ctx context.Context, in *GuildSplashInput, opts ...grpc.CallOption) (*GuildSplashOutput, error) {
	out := new(GuildSplashOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildSplash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildEmbed(ctx context.Context, in *GuildEmbedInput, opts ...grpc.CallOption) (*GuildEmbedOutput, error) {
	out := new(GuildEmbedOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildEmbed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildEmbedEdit(ctx context.Context, in *GuildEmbedEditInput, opts ...grpc.CallOption) (*GuildEmbedEditOutput, error) {
	out := new(GuildEmbedEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildEmbedEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildAuditLog(ctx context.Context, in *GuildAuditLogInput, opts ...grpc.CallOption) (*GuildAuditLogOutput, error) {
	out := new(GuildAuditLogOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildAuditLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildEmojis(ctx context.Context, in *GuildEmojisInput, opts ...grpc.CallOption) (*GuildEmojisOutput, error) {
	out := new(GuildEmojisOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildEmojis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildEmoji(ctx context.Context, in *GuildEmojiInput, opts ...grpc.CallOption) (*GuildEmojiOutput, error) {
	out := new(GuildEmojiOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildEmojiCreate(ctx context.Context, in *GuildEmojiCreateInput, opts ...grpc.CallOption) (*GuildEmojiCreateOutput, error) {
	out := new(GuildEmojiCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildEmojiCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildEmojiEdit(ctx context.Context, in *GuildEmojiEditInput, opts ...grpc.CallOption) (*GuildEmojiEditOutput, error) {
	out := new(GuildEmojiEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildEmojiEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildEmojiDelete(ctx context.Context, in *GuildEmojiDeleteInput, opts ...grpc.CallOption) (*GuildEmojiDeleteOutput, error) {
	out := new(GuildEmojiDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildEmojiDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildTemplate(ctx context.Context, in *GuildTemplateInput, opts ...grpc.CallOption) (*GuildTemplateOutput, error) {
	out := new(GuildTemplateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildCreateWithTemplate(ctx context.Context, in *GuildCreateWithTemplateInput, opts ...grpc.CallOption) (*GuildCreateWithTemplateOutput, error) {
	out := new(GuildCreateWithTemplateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildCreateWithTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildTemplates(ctx context.Context, in *GuildTemplatesInput, opts ...grpc.CallOption) (*GuildTemplatesOutput, error) {
	out := new(GuildTemplatesOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildTemplateCreate(ctx context.Context, in *GuildTemplateCreateInput, opts ...grpc.CallOption) (*GuildTemplateCreateOutput, error) {
	out := new(GuildTemplateCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildTemplateCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildTemplateSync(ctx context.Context, in *GuildTemplateSyncInput, opts ...grpc.CallOption) (*GuildTemplateSyncOutput, error) {
	out := new(GuildTemplateSyncOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildTemplateSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildTemplateEdit(ctx context.Context, in *GuildTemplateEditInput, opts ...grpc.CallOption) (*GuildTemplateEditOutput, error) {
	out := new(GuildTemplateEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildTemplateEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildTemplateDelete(ctx context.Context, in *GuildTemplateDeleteInput, opts ...grpc.CallOption) (*GuildTemplateDeleteOutput, error) {
	out := new(GuildTemplateDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildTemplateDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) Channel(ctx context.Context, in *ChannelInput, opts ...grpc.CallOption) (*ChannelOutput, error) {
	out := new(ChannelOutput)
	err := c.cc.Invoke(ctx, "/Gayway/Channel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelEdit(ctx context.Context, in *ChannelEditInput, opts ...grpc.CallOption) (*ChannelEditOutput, error) {
	out := new(ChannelEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelEditComplex(ctx context.Context, in *ChannelEditComplexInput, opts ...grpc.CallOption) (*ChannelEditComplexOutput, error) {
	out := new(ChannelEditComplexOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelEditComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelDelete(ctx context.Context, in *ChannelDeleteInput, opts ...grpc.CallOption) (*ChannelDeleteOutput, error) {
	out := new(ChannelDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelTyping(ctx context.Context, in *ChannelTypingInput, opts ...grpc.CallOption) (*ChannelTypingOutput, error) {
	out := new(ChannelTypingOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelTyping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessages(ctx context.Context, in *ChannelMessagesInput, opts ...grpc.CallOption) (*ChannelMessagesOutput, error) {
	out := new(ChannelMessagesOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessage(ctx context.Context, in *ChannelMessageInput, opts ...grpc.CallOption) (*ChannelMessageOutput, error) {
	out := new(ChannelMessageOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageSend(ctx context.Context, in *ChannelMessageSendInput, opts ...grpc.CallOption) (*ChannelMessageSendOutput, error) {
	out := new(ChannelMessageSendOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageSendComplex(ctx context.Context, in *ChannelMessageSendComplexInput, opts ...grpc.CallOption) (*ChannelMessageSendComplexOutput, error) {
	out := new(ChannelMessageSendComplexOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageSendComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageSendTTS(ctx context.Context, in *ChannelMessageSendTTSInput, opts ...grpc.CallOption) (*ChannelMessageSendTTSOutput, error) {
	out := new(ChannelMessageSendTTSOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageSendTTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageSendEmbed(ctx context.Context, in *ChannelMessageSendEmbedInput, opts ...grpc.CallOption) (*ChannelMessageSendEmbedOutput, error) {
	out := new(ChannelMessageSendEmbedOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageSendEmbed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageSendEmbeds(ctx context.Context, in *ChannelMessageSendEmbedsInput, opts ...grpc.CallOption) (*ChannelMessageSendEmbedsOutput, error) {
	out := new(ChannelMessageSendEmbedsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageSendEmbeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageSendReply(ctx context.Context, in *ChannelMessageSendReplyInput, opts ...grpc.CallOption) (*ChannelMessageSendReplyOutput, error) {
	out := new(ChannelMessageSendReplyOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageSendReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageSendEmbedReply(ctx context.Context, in *ChannelMessageSendEmbedReplyInput, opts ...grpc.CallOption) (*ChannelMessageSendEmbedReplyOutput, error) {
	out := new(ChannelMessageSendEmbedReplyOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageSendEmbedReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageSendEmbedsReply(ctx context.Context, in *ChannelMessageSendEmbedsReplyInput, opts ...grpc.CallOption) (*ChannelMessageSendEmbedsReplyOutput, error) {
	out := new(ChannelMessageSendEmbedsReplyOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageSendEmbedsReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageEdit(ctx context.Context, in *ChannelMessageEditInput, opts ...grpc.CallOption) (*ChannelMessageEditOutput, error) {
	out := new(ChannelMessageEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageEditComplex(ctx context.Context, in *ChannelMessageEditComplexInput, opts ...grpc.CallOption) (*ChannelMessageEditComplexOutput, error) {
	out := new(ChannelMessageEditComplexOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageEditComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageEditEmbed(ctx context.Context, in *ChannelMessageEditEmbedInput, opts ...grpc.CallOption) (*ChannelMessageEditEmbedOutput, error) {
	out := new(ChannelMessageEditEmbedOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageEditEmbed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageEditEmbeds(ctx context.Context, in *ChannelMessageEditEmbedsInput, opts ...grpc.CallOption) (*ChannelMessageEditEmbedsOutput, error) {
	out := new(ChannelMessageEditEmbedsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageEditEmbeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageDelete(ctx context.Context, in *ChannelMessageDeleteInput, opts ...grpc.CallOption) (*ChannelMessageDeleteOutput, error) {
	out := new(ChannelMessageDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessagesBulkDelete(ctx context.Context, in *ChannelMessagesBulkDeleteInput, opts ...grpc.CallOption) (*ChannelMessagesBulkDeleteOutput, error) {
	out := new(ChannelMessagesBulkDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessagesBulkDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessagePin(ctx context.Context, in *ChannelMessagePinInput, opts ...grpc.CallOption) (*ChannelMessagePinOutput, error) {
	out := new(ChannelMessagePinOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessagePin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageUnpin(ctx context.Context, in *ChannelMessageUnpinInput, opts ...grpc.CallOption) (*ChannelMessageUnpinOutput, error) {
	out := new(ChannelMessageUnpinOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageUnpin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessagesPinned(ctx context.Context, in *ChannelMessagesPinnedInput, opts ...grpc.CallOption) (*ChannelMessagesPinnedOutput, error) {
	out := new(ChannelMessagesPinnedOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessagesPinned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelFileSend(ctx context.Context, in *ChannelFileSendInput, opts ...grpc.CallOption) (*ChannelFileSendOutput, error) {
	out := new(ChannelFileSendOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelFileSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelFileSendWithMessage(ctx context.Context, in *ChannelFileSendWithMessageInput, opts ...grpc.CallOption) (*ChannelFileSendWithMessageOutput, error) {
	out := new(ChannelFileSendWithMessageOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelFileSendWithMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelInvites(ctx context.Context, in *ChannelInvitesInput, opts ...grpc.CallOption) (*ChannelInvitesOutput, error) {
	out := new(ChannelInvitesOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelInviteCreate(ctx context.Context, in *ChannelInviteCreateInput, opts ...grpc.CallOption) (*ChannelInviteCreateOutput, error) {
	out := new(ChannelInviteCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelInviteCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelPermissionSet(ctx context.Context, in *ChannelPermissionSetInput, opts ...grpc.CallOption) (*ChannelPermissionSetOutput, error) {
	out := new(ChannelPermissionSetOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelPermissionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelPermissionDelete(ctx context.Context, in *ChannelPermissionDeleteInput, opts ...grpc.CallOption) (*ChannelPermissionDeleteOutput, error) {
	out := new(ChannelPermissionDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelPermissionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelMessageCrosspost(ctx context.Context, in *ChannelMessageCrosspostInput, opts ...grpc.CallOption) (*ChannelMessageCrosspostOutput, error) {
	out := new(ChannelMessageCrosspostOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelMessageCrosspost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelNewsFollow(ctx context.Context, in *ChannelNewsFollowInput, opts ...grpc.CallOption) (*ChannelNewsFollowOutput, error) {
	out := new(ChannelNewsFollowOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelNewsFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) Invite(ctx context.Context, in *InviteInput, opts ...grpc.CallOption) (*InviteOutput, error) {
	out := new(InviteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/Invite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) InviteWithCounts(ctx context.Context, in *InviteWithCountsInput, opts ...grpc.CallOption) (*InviteWithCountsOutput, error) {
	out := new(InviteWithCountsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/InviteWithCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) InviteComplex(ctx context.Context, in *InviteComplexInput, opts ...grpc.CallOption) (*InviteComplexOutput, error) {
	out := new(InviteComplexOutput)
	err := c.cc.Invoke(ctx, "/Gayway/InviteComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) InviteDelete(ctx context.Context, in *InviteDeleteInput, opts ...grpc.CallOption) (*InviteDeleteOutput, error) {
	out := new(InviteDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/InviteDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) InviteAccept(ctx context.Context, in *InviteAcceptInput, opts ...grpc.CallOption) (*InviteAcceptOutput, error) {
	out := new(InviteAcceptOutput)
	err := c.cc.Invoke(ctx, "/Gayway/InviteAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) VoiceRegions(ctx context.Context, in *VoiceRegionsInput, opts ...grpc.CallOption) (*VoiceRegionsOutput, error) {
	out := new(VoiceRegionsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/VoiceRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) Gateway(ctx context.Context, in *GatewayInput, opts ...grpc.CallOption) (*GatewayOutput, error) {
	out := new(GatewayOutput)
	err := c.cc.Invoke(ctx, "/Gayway/Gateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GatewayBot(ctx context.Context, in *GatewayBotInput, opts ...grpc.CallOption) (*GatewayBotOutput, error) {
	out := new(GatewayBotOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GatewayBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) WebhookCreate(ctx context.Context, in *WebhookCreateInput, opts ...grpc.CallOption) (*WebhookCreateOutput, error) {
	out := new(WebhookCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/WebhookCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelWebhooks(ctx context.Context, in *ChannelWebhooksInput, opts ...grpc.CallOption) (*ChannelWebhooksOutput, error) {
	out := new(ChannelWebhooksOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildWebhooks(ctx context.Context, in *GuildWebhooksInput, opts ...grpc.CallOption) (*GuildWebhooksOutput, error) {
	out := new(GuildWebhooksOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) Webhook(ctx context.Context, in *WebhookInput, opts ...grpc.CallOption) (*WebhookOutput, error) {
	out := new(WebhookOutput)
	err := c.cc.Invoke(ctx, "/Gayway/Webhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) WebhookWithToken(ctx context.Context, in *WebhookWithTokenInput, opts ...grpc.CallOption) (*WebhookWithTokenOutput, error) {
	out := new(WebhookWithTokenOutput)
	err := c.cc.Invoke(ctx, "/Gayway/WebhookWithToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) WebhookEdit(ctx context.Context, in *WebhookEditInput, opts ...grpc.CallOption) (*WebhookEditOutput, error) {
	out := new(WebhookEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/WebhookEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) WebhookEditWithToken(ctx context.Context, in *WebhookEditWithTokenInput, opts ...grpc.CallOption) (*WebhookEditWithTokenOutput, error) {
	out := new(WebhookEditWithTokenOutput)
	err := c.cc.Invoke(ctx, "/Gayway/WebhookEditWithToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) WebhookDelete(ctx context.Context, in *WebhookDeleteInput, opts ...grpc.CallOption) (*WebhookDeleteOutput, error) {
	out := new(WebhookDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/WebhookDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) WebhookDeleteWithToken(ctx context.Context, in *WebhookDeleteWithTokenInput, opts ...grpc.CallOption) (*WebhookDeleteWithTokenOutput, error) {
	out := new(WebhookDeleteWithTokenOutput)
	err := c.cc.Invoke(ctx, "/Gayway/WebhookDeleteWithToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) WebhookExecute(ctx context.Context, in *WebhookExecuteInput, opts ...grpc.CallOption) (*WebhookExecuteOutput, error) {
	out := new(WebhookExecuteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/WebhookExecute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) WebhookThreadExecute(ctx context.Context, in *WebhookThreadExecuteInput, opts ...grpc.CallOption) (*WebhookThreadExecuteOutput, error) {
	out := new(WebhookThreadExecuteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/WebhookThreadExecute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) WebhookMessage(ctx context.Context, in *WebhookMessageInput, opts ...grpc.CallOption) (*WebhookMessageOutput, error) {
	out := new(WebhookMessageOutput)
	err := c.cc.Invoke(ctx, "/Gayway/WebhookMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) WebhookMessageEdit(ctx context.Context, in *WebhookMessageEditInput, opts ...grpc.CallOption) (*WebhookMessageEditOutput, error) {
	out := new(WebhookMessageEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/WebhookMessageEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) WebhookMessageDelete(ctx context.Context, in *WebhookMessageDeleteInput, opts ...grpc.CallOption) (*WebhookMessageDeleteOutput, error) {
	out := new(WebhookMessageDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/WebhookMessageDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) MessageReactionAdd(ctx context.Context, in *MessageReactionAddInput, opts ...grpc.CallOption) (*MessageReactionAddOutput, error) {
	out := new(MessageReactionAddOutput)
	err := c.cc.Invoke(ctx, "/Gayway/MessageReactionAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) MessageReactionRemove(ctx context.Context, in *MessageReactionRemoveInput, opts ...grpc.CallOption) (*MessageReactionRemoveOutput, error) {
	out := new(MessageReactionRemoveOutput)
	err := c.cc.Invoke(ctx, "/Gayway/MessageReactionRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) MessageReactionsRemoveAll(ctx context.Context, in *MessageReactionsRemoveAllInput, opts ...grpc.CallOption) (*MessageReactionsRemoveAllOutput, error) {
	out := new(MessageReactionsRemoveAllOutput)
	err := c.cc.Invoke(ctx, "/Gayway/MessageReactionsRemoveAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) MessageReactionsRemoveEmoji(ctx context.Context, in *MessageReactionsRemoveEmojiInput, opts ...grpc.CallOption) (*MessageReactionsRemoveEmojiOutput, error) {
	out := new(MessageReactionsRemoveEmojiOutput)
	err := c.cc.Invoke(ctx, "/Gayway/MessageReactionsRemoveEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) MessageReactions(ctx context.Context, in *MessageReactionsInput, opts ...grpc.CallOption) (*MessageReactionsOutput, error) {
	out := new(MessageReactionsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/MessageReactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) MessageThreadStartComplex(ctx context.Context, in *MessageThreadStartComplexInput, opts ...grpc.CallOption) (*MessageThreadStartComplexOutput, error) {
	out := new(MessageThreadStartComplexOutput)
	err := c.cc.Invoke(ctx, "/Gayway/MessageThreadStartComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) MessageThreadStart(ctx context.Context, in *MessageThreadStartInput, opts ...grpc.CallOption) (*MessageThreadStartOutput, error) {
	out := new(MessageThreadStartOutput)
	err := c.cc.Invoke(ctx, "/Gayway/MessageThreadStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ThreadStartComplex(ctx context.Context, in *ThreadStartComplexInput, opts ...grpc.CallOption) (*ThreadStartComplexOutput, error) {
	out := new(ThreadStartComplexOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ThreadStartComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ThreadStart(ctx context.Context, in *ThreadStartInput, opts ...grpc.CallOption) (*ThreadStartOutput, error) {
	out := new(ThreadStartOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ThreadStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ForumThreadStartComplex(ctx context.Context, in *ForumThreadStartComplexInput, opts ...grpc.CallOption) (*ForumThreadStartComplexOutput, error) {
	out := new(ForumThreadStartComplexOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ForumThreadStartComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ForumThreadStart(ctx context.Context, in *ForumThreadStartInput, opts ...grpc.CallOption) (*ForumThreadStartOutput, error) {
	out := new(ForumThreadStartOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ForumThreadStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ForumThreadStartEmbed(ctx context.Context, in *ForumThreadStartEmbedInput, opts ...grpc.CallOption) (*ForumThreadStartEmbedOutput, error) {
	out := new(ForumThreadStartEmbedOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ForumThreadStartEmbed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ForumThreadStartEmbeds(ctx context.Context, in *ForumThreadStartEmbedsInput, opts ...grpc.CallOption) (*ForumThreadStartEmbedsOutput, error) {
	out := new(ForumThreadStartEmbedsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ForumThreadStartEmbeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ThreadJoin(ctx context.Context, in *ThreadJoinInput, opts ...grpc.CallOption) (*ThreadJoinOutput, error) {
	out := new(ThreadJoinOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ThreadJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ThreadLeave(ctx context.Context, in *ThreadLeaveInput, opts ...grpc.CallOption) (*ThreadLeaveOutput, error) {
	out := new(ThreadLeaveOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ThreadLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ThreadMemberAdd(ctx context.Context, in *ThreadMemberAddInput, opts ...grpc.CallOption) (*ThreadMemberAddOutput, error) {
	out := new(ThreadMemberAddOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ThreadMemberAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ThreadMemberRemove(ctx context.Context, in *ThreadMemberRemoveInput, opts ...grpc.CallOption) (*ThreadMemberRemoveOutput, error) {
	out := new(ThreadMemberRemoveOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ThreadMemberRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ThreadMember(ctx context.Context, in *ThreadMemberInput, opts ...grpc.CallOption) (*ThreadMemberOutput, error) {
	out := new(ThreadMemberOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ThreadMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ThreadMembers(ctx context.Context, in *ThreadMembersInput, opts ...grpc.CallOption) (*ThreadMembersOutput, error) {
	out := new(ThreadMembersOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ThreadMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ThreadsActive(ctx context.Context, in *ThreadsActiveInput, opts ...grpc.CallOption) (*ThreadsActiveOutput, error) {
	out := new(ThreadsActiveOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ThreadsActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildThreadsActive(ctx context.Context, in *GuildThreadsActiveInput, opts ...grpc.CallOption) (*GuildThreadsActiveOutput, error) {
	out := new(GuildThreadsActiveOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildThreadsActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ThreadsArchived(ctx context.Context, in *ThreadsArchivedInput, opts ...grpc.CallOption) (*ThreadsArchivedOutput, error) {
	out := new(ThreadsArchivedOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ThreadsArchived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ThreadsPrivateArchived(ctx context.Context, in *ThreadsPrivateArchivedInput, opts ...grpc.CallOption) (*ThreadsPrivateArchivedOutput, error) {
	out := new(ThreadsPrivateArchivedOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ThreadsPrivateArchived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ThreadsPrivateJoinedArchived(ctx context.Context, in *ThreadsPrivateJoinedArchivedInput, opts ...grpc.CallOption) (*ThreadsPrivateJoinedArchivedOutput, error) {
	out := new(ThreadsPrivateJoinedArchivedOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ThreadsPrivateJoinedArchived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationCommandCreate(ctx context.Context, in *ApplicationCommandCreateInput, opts ...grpc.CallOption) (*ApplicationCommandCreateOutput, error) {
	out := new(ApplicationCommandCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationCommandCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationCommandEdit(ctx context.Context, in *ApplicationCommandEditInput, opts ...grpc.CallOption) (*ApplicationCommandEditOutput, error) {
	out := new(ApplicationCommandEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationCommandEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationCommandBulkOverwrite(ctx context.Context, in *ApplicationCommandBulkOverwriteInput, opts ...grpc.CallOption) (*ApplicationCommandBulkOverwriteOutput, error) {
	out := new(ApplicationCommandBulkOverwriteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationCommandBulkOverwrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationCommandDelete(ctx context.Context, in *ApplicationCommandDeleteInput, opts ...grpc.CallOption) (*ApplicationCommandDeleteOutput, error) {
	out := new(ApplicationCommandDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationCommandDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationCommand(ctx context.Context, in *ApplicationCommandInput, opts ...grpc.CallOption) (*ApplicationCommandOutput, error) {
	out := new(ApplicationCommandOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationCommands(ctx context.Context, in *ApplicationCommandsInput, opts ...grpc.CallOption) (*ApplicationCommandsOutput, error) {
	out := new(ApplicationCommandsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildApplicationCommandsPermissions(ctx context.Context, in *GuildApplicationCommandsPermissionsInput, opts ...grpc.CallOption) (*GuildApplicationCommandsPermissionsOutput, error) {
	out := new(GuildApplicationCommandsPermissionsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildApplicationCommandsPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationCommandPermissions(ctx context.Context, in *ApplicationCommandPermissionsInput, opts ...grpc.CallOption) (*ApplicationCommandPermissionsOutput, error) {
	out := new(ApplicationCommandPermissionsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationCommandPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationCommandPermissionsEdit(ctx context.Context, in *ApplicationCommandPermissionsEditInput, opts ...grpc.CallOption) (*ApplicationCommandPermissionsEditOutput, error) {
	out := new(ApplicationCommandPermissionsEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationCommandPermissionsEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationCommandPermissionsBatchEdit(ctx context.Context, in *ApplicationCommandPermissionsBatchEditInput, opts ...grpc.CallOption) (*ApplicationCommandPermissionsBatchEditOutput, error) {
	out := new(ApplicationCommandPermissionsBatchEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationCommandPermissionsBatchEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) InteractionRespond(ctx context.Context, in *InteractionRespondInput, opts ...grpc.CallOption) (*InteractionRespondOutput, error) {
	out := new(InteractionRespondOutput)
	err := c.cc.Invoke(ctx, "/Gayway/InteractionRespond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) InteractionResponse(ctx context.Context, in *InteractionResponseInput, opts ...grpc.CallOption) (*InteractionResponseOutput, error) {
	out := new(InteractionResponseOutput)
	err := c.cc.Invoke(ctx, "/Gayway/InteractionResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) InteractionResponseEdit(ctx context.Context, in *InteractionResponseEditInput, opts ...grpc.CallOption) (*InteractionResponseEditOutput, error) {
	out := new(InteractionResponseEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/InteractionResponseEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) InteractionResponseDelete(ctx context.Context, in *InteractionResponseDeleteInput, opts ...grpc.CallOption) (*InteractionResponseDeleteOutput, error) {
	out := new(InteractionResponseDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/InteractionResponseDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) FollowupMessageCreate(ctx context.Context, in *FollowupMessageCreateInput, opts ...grpc.CallOption) (*FollowupMessageCreateOutput, error) {
	out := new(FollowupMessageCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/FollowupMessageCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) FollowupMessageEdit(ctx context.Context, in *FollowupMessageEditInput, opts ...grpc.CallOption) (*FollowupMessageEditOutput, error) {
	out := new(FollowupMessageEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/FollowupMessageEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) FollowupMessageDelete(ctx context.Context, in *FollowupMessageDeleteInput, opts ...grpc.CallOption) (*FollowupMessageDeleteOutput, error) {
	out := new(FollowupMessageDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/FollowupMessageDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) StageInstanceCreate(ctx context.Context, in *StageInstanceCreateInput, opts ...grpc.CallOption) (*StageInstanceCreateOutput, error) {
	out := new(StageInstanceCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/StageInstanceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) StageInstance(ctx context.Context, in *StageInstanceInput, opts ...grpc.CallOption) (*StageInstanceOutput, error) {
	out := new(StageInstanceOutput)
	err := c.cc.Invoke(ctx, "/Gayway/StageInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) StageInstanceEdit(ctx context.Context, in *StageInstanceEditInput, opts ...grpc.CallOption) (*StageInstanceEditOutput, error) {
	out := new(StageInstanceEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/StageInstanceEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) StageInstanceDelete(ctx context.Context, in *StageInstanceDeleteInput, opts ...grpc.CallOption) (*StageInstanceDeleteOutput, error) {
	out := new(StageInstanceDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/StageInstanceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildScheduledEvents(ctx context.Context, in *GuildScheduledEventsInput, opts ...grpc.CallOption) (*GuildScheduledEventsOutput, error) {
	out := new(GuildScheduledEventsOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildScheduledEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildScheduledEvent(ctx context.Context, in *GuildScheduledEventInput, opts ...grpc.CallOption) (*GuildScheduledEventOutput, error) {
	out := new(GuildScheduledEventOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildScheduledEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildScheduledEventCreate(ctx context.Context, in *GuildScheduledEventCreateInput, opts ...grpc.CallOption) (*GuildScheduledEventCreateOutput, error) {
	out := new(GuildScheduledEventCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildScheduledEventCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildScheduledEventEdit(ctx context.Context, in *GuildScheduledEventEditInput, opts ...grpc.CallOption) (*GuildScheduledEventEditOutput, error) {
	out := new(GuildScheduledEventEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildScheduledEventEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildScheduledEventDelete(ctx context.Context, in *GuildScheduledEventDeleteInput, opts ...grpc.CallOption) (*GuildScheduledEventDeleteOutput, error) {
	out := new(GuildScheduledEventDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildScheduledEventDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) GuildScheduledEventUsers(ctx context.Context, in *GuildScheduledEventUsersInput, opts ...grpc.CallOption) (*GuildScheduledEventUsersOutput, error) {
	out := new(GuildScheduledEventUsersOutput)
	err := c.cc.Invoke(ctx, "/Gayway/GuildScheduledEventUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) AutoModerationRules(ctx context.Context, in *AutoModerationRulesInput, opts ...grpc.CallOption) (*AutoModerationRulesOutput, error) {
	out := new(AutoModerationRulesOutput)
	err := c.cc.Invoke(ctx, "/Gayway/AutoModerationRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) AutoModerationRule(ctx context.Context, in *AutoModerationRuleInput, opts ...grpc.CallOption) (*AutoModerationRuleOutput, error) {
	out := new(AutoModerationRuleOutput)
	err := c.cc.Invoke(ctx, "/Gayway/AutoModerationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) AutoModerationRuleCreate(ctx context.Context, in *AutoModerationRuleCreateInput, opts ...grpc.CallOption) (*AutoModerationRuleCreateOutput, error) {
	out := new(AutoModerationRuleCreateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/AutoModerationRuleCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) AutoModerationRuleEdit(ctx context.Context, in *AutoModerationRuleEditInput, opts ...grpc.CallOption) (*AutoModerationRuleEditOutput, error) {
	out := new(AutoModerationRuleEditOutput)
	err := c.cc.Invoke(ctx, "/Gayway/AutoModerationRuleEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) AutoModerationRuleDelete(ctx context.Context, in *AutoModerationRuleDeleteInput, opts ...grpc.CallOption) (*AutoModerationRuleDeleteOutput, error) {
	out := new(AutoModerationRuleDeleteOutput)
	err := c.cc.Invoke(ctx, "/Gayway/AutoModerationRuleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationRoleConnectionMetadata(ctx context.Context, in *ApplicationRoleConnectionMetadataInput, opts ...grpc.CallOption) (*ApplicationRoleConnectionMetadataOutput, error) {
	out := new(ApplicationRoleConnectionMetadataOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationRoleConnectionMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ApplicationRoleConnectionMetadataUpdate(ctx context.Context, in *ApplicationRoleConnectionMetadataUpdateInput, opts ...grpc.CallOption) (*ApplicationRoleConnectionMetadataUpdateOutput, error) {
	out := new(ApplicationRoleConnectionMetadataUpdateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ApplicationRoleConnectionMetadataUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UserApplicationRoleConnection(ctx context.Context, in *UserApplicationRoleConnectionInput, opts ...grpc.CallOption) (*UserApplicationRoleConnectionOutput, error) {
	out := new(UserApplicationRoleConnectionOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UserApplicationRoleConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UserApplicationRoleConnectionUpdate(ctx context.Context, in *UserApplicationRoleConnectionUpdateInput, opts ...grpc.CallOption) (*UserApplicationRoleConnectionUpdateOutput, error) {
	out := new(UserApplicationRoleConnectionUpdateOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UserApplicationRoleConnectionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) HeartbeatLatency(ctx context.Context, in *HeartbeatLatencyInput, opts ...grpc.CallOption) (*HeartbeatLatencyOutput, error) {
	out := new(HeartbeatLatencyOutput)
	err := c.cc.Invoke(ctx, "/Gayway/HeartbeatLatency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UpdateGameStatus(ctx context.Context, in *UpdateGameStatusInput, opts ...grpc.CallOption) (*UpdateGameStatusOutput, error) {
	out := new(UpdateGameStatusOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UpdateGameStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UpdateWatchStatus(ctx context.Context, in *UpdateWatchStatusInput, opts ...grpc.CallOption) (*UpdateWatchStatusOutput, error) {
	out := new(UpdateWatchStatusOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UpdateWatchStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UpdateStreamingStatus(ctx context.Context, in *UpdateStreamingStatusInput, opts ...grpc.CallOption) (*UpdateStreamingStatusOutput, error) {
	out := new(UpdateStreamingStatusOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UpdateStreamingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UpdateListeningStatus(ctx context.Context, in *UpdateListeningStatusInput, opts ...grpc.CallOption) (*UpdateListeningStatusOutput, error) {
	out := new(UpdateListeningStatusOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UpdateListeningStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) UpdateStatusComplex(ctx context.Context, in *UpdateStatusComplexInput, opts ...grpc.CallOption) (*UpdateStatusComplexOutput, error) {
	out := new(UpdateStatusComplexOutput)
	err := c.cc.Invoke(ctx, "/Gayway/UpdateStatusComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) RequestGuildMembers(ctx context.Context, in *RequestGuildMembersInput, opts ...grpc.CallOption) (*RequestGuildMembersOutput, error) {
	out := new(RequestGuildMembersOutput)
	err := c.cc.Invoke(ctx, "/Gayway/RequestGuildMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) RequestGuildMembersList(ctx context.Context, in *RequestGuildMembersListInput, opts ...grpc.CallOption) (*RequestGuildMembersListOutput, error) {
	out := new(RequestGuildMembersListOutput)
	err := c.cc.Invoke(ctx, "/Gayway/RequestGuildMembersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) RequestGuildMembersBatch(ctx context.Context, in *RequestGuildMembersBatchInput, opts ...grpc.CallOption) (*RequestGuildMembersBatchOutput, error) {
	out := new(RequestGuildMembersBatchOutput)
	err := c.cc.Invoke(ctx, "/Gayway/RequestGuildMembersBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) RequestGuildMembersBatchList(ctx context.Context, in *RequestGuildMembersBatchListInput, opts ...grpc.CallOption) (*RequestGuildMembersBatchListOutput, error) {
	out := new(RequestGuildMembersBatchListOutput)
	err := c.cc.Invoke(ctx, "/Gayway/RequestGuildMembersBatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaywayClient) ChannelVoiceJoinManual(ctx context.Context, in *ChannelVoiceJoinManualInput, opts ...grpc.CallOption) (*ChannelVoiceJoinManualOutput, error) {
	out := new(ChannelVoiceJoinManualOutput)
	err := c.cc.Invoke(ctx, "/Gayway/ChannelVoiceJoinManual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GaywayServer is the server API for Gayway service.
// All implementations must embed UnimplementedGaywayServer
// for forward compatibility
type GaywayServer interface {
	Application(context.Context, *ApplicationInput) (*ApplicationOutput, error)
	Applications(context.Context, *ApplicationsInput) (*ApplicationsOutput, error)
	ApplicationCreate(context.Context, *ApplicationCreateInput) (*ApplicationCreateOutput, error)
	ApplicationUpdate(context.Context, *ApplicationUpdateInput) (*ApplicationUpdateOutput, error)
	ApplicationDelete(context.Context, *ApplicationDeleteInput) (*ApplicationDeleteOutput, error)
	ApplicationAssets(context.Context, *ApplicationAssetsInput) (*ApplicationAssetsOutput, error)
	ApplicationBotCreate(context.Context, *ApplicationBotCreateInput) (*ApplicationBotCreateOutput, error)
	Request(context.Context, *RequestInput) (*RequestOutput, error)
	RequestWithBucketID(context.Context, *RequestWithBucketIDInput) (*RequestWithBucketIDOutput, error)
	User(context.Context, *UserInput) (*UserOutput, error)
	UserAvatar(context.Context, *UserAvatarInput) (*UserAvatarOutput, error)
	UserAvatarDecode(context.Context, *UserAvatarDecodeInput) (*UserAvatarDecodeOutput, error)
	UserUpdate(context.Context, *UserUpdateInput) (*UserUpdateOutput, error)
	UserConnections(context.Context, *UserConnectionsInput) (*UserConnectionsOutput, error)
	UserChannelCreate(context.Context, *UserChannelCreateInput) (*UserChannelCreateOutput, error)
	UserGuildMember(context.Context, *UserGuildMemberInput) (*UserGuildMemberOutput, error)
	UserGuilds(context.Context, *UserGuildsInput) (*UserGuildsOutput, error)
	UserChannelPermissions(context.Context, *UserChannelPermissionsInput) (*UserChannelPermissionsOutput, error)
	Guild(context.Context, *GuildInput) (*GuildOutput, error)
	GuildWithCounts(context.Context, *GuildWithCountsInput) (*GuildWithCountsOutput, error)
	GuildPreview(context.Context, *GuildPreviewInput) (*GuildPreviewOutput, error)
	GuildCreate(context.Context, *GuildCreateInput) (*GuildCreateOutput, error)
	GuildEdit(context.Context, *GuildEditInput) (*GuildEditOutput, error)
	GuildDelete(context.Context, *GuildDeleteInput) (*GuildDeleteOutput, error)
	GuildLeave(context.Context, *GuildLeaveInput) (*GuildLeaveOutput, error)
	GuildBans(context.Context, *GuildBansInput) (*GuildBansOutput, error)
	GuildBanCreate(context.Context, *GuildBanCreateInput) (*GuildBanCreateOutput, error)
	GuildBan(context.Context, *GuildBanInput) (*GuildBanOutput, error)
	GuildBanCreateWithReason(context.Context, *GuildBanCreateWithReasonInput) (*GuildBanCreateWithReasonOutput, error)
	GuildBanDelete(context.Context, *GuildBanDeleteInput) (*GuildBanDeleteOutput, error)
	GuildMembers(context.Context, *GuildMembersInput) (*GuildMembersOutput, error)
	GuildMembersSearch(context.Context, *GuildMembersSearchInput) (*GuildMembersSearchOutput, error)
	GuildMember(context.Context, *GuildMemberInput) (*GuildMemberOutput, error)
	GuildMemberAdd(context.Context, *GuildMemberAddInput) (*GuildMemberAddOutput, error)
	GuildMemberDelete(context.Context, *GuildMemberDeleteInput) (*GuildMemberDeleteOutput, error)
	GuildMemberDeleteWithReason(context.Context, *GuildMemberDeleteWithReasonInput) (*GuildMemberDeleteWithReasonOutput, error)
	GuildMemberEdit(context.Context, *GuildMemberEditInput) (*GuildMemberEditOutput, error)
	GuildMemberEditComplex(context.Context, *GuildMemberEditComplexInput) (*GuildMemberEditComplexOutput, error)
	GuildMemberMove(context.Context, *GuildMemberMoveInput) (*GuildMemberMoveOutput, error)
	GuildMemberNickname(context.Context, *GuildMemberNicknameInput) (*GuildMemberNicknameOutput, error)
	GuildMemberMute(context.Context, *GuildMemberMuteInput) (*GuildMemberMuteOutput, error)
	GuildMemberTimeout(context.Context, *GuildMemberTimeoutInput) (*GuildMemberTimeoutOutput, error)
	GuildMemberDeafen(context.Context, *GuildMemberDeafenInput) (*GuildMemberDeafenOutput, error)
	GuildMemberRoleAdd(context.Context, *GuildMemberRoleAddInput) (*GuildMemberRoleAddOutput, error)
	GuildMemberRoleRemove(context.Context, *GuildMemberRoleRemoveInput) (*GuildMemberRoleRemoveOutput, error)
	GuildChannels(context.Context, *GuildChannelsInput) (*GuildChannelsOutput, error)
	GuildChannelCreateComplex(context.Context, *GuildChannelCreateComplexInput) (*GuildChannelCreateComplexOutput, error)
	GuildChannelCreate(context.Context, *GuildChannelCreateInput) (*GuildChannelCreateOutput, error)
	GuildChannelsReorder(context.Context, *GuildChannelsReorderInput) (*GuildChannelsReorderOutput, error)
	GuildInvites(context.Context, *GuildInvitesInput) (*GuildInvitesOutput, error)
	GuildRoles(context.Context, *GuildRolesInput) (*GuildRolesOutput, error)
	GuildRoleCreate(context.Context, *GuildRoleCreateInput) (*GuildRoleCreateOutput, error)
	GuildRoleEdit(context.Context, *GuildRoleEditInput) (*GuildRoleEditOutput, error)
	GuildRoleReorder(context.Context, *GuildRoleReorderInput) (*GuildRoleReorderOutput, error)
	GuildRoleDelete(context.Context, *GuildRoleDeleteInput) (*GuildRoleDeleteOutput, error)
	GuildPruneCount(context.Context, *GuildPruneCountInput) (*GuildPruneCountOutput, error)
	GuildPrune(context.Context, *GuildPruneInput) (*GuildPruneOutput, error)
	GuildIntegrations(context.Context, *GuildIntegrationsInput) (*GuildIntegrationsOutput, error)
	GuildIntegrationCreate(context.Context, *GuildIntegrationCreateInput) (*GuildIntegrationCreateOutput, error)
	GuildIntegrationEdit(context.Context, *GuildIntegrationEditInput) (*GuildIntegrationEditOutput, error)
	GuildIntegrationDelete(context.Context, *GuildIntegrationDeleteInput) (*GuildIntegrationDeleteOutput, error)
	GuildIcon(context.Context, *GuildIconInput) (*GuildIconOutput, error)
	GuildSplash(context.Context, *GuildSplashInput) (*GuildSplashOutput, error)
	GuildEmbed(context.Context, *GuildEmbedInput) (*GuildEmbedOutput, error)
	GuildEmbedEdit(context.Context, *GuildEmbedEditInput) (*GuildEmbedEditOutput, error)
	GuildAuditLog(context.Context, *GuildAuditLogInput) (*GuildAuditLogOutput, error)
	GuildEmojis(context.Context, *GuildEmojisInput) (*GuildEmojisOutput, error)
	GuildEmoji(context.Context, *GuildEmojiInput) (*GuildEmojiOutput, error)
	GuildEmojiCreate(context.Context, *GuildEmojiCreateInput) (*GuildEmojiCreateOutput, error)
	GuildEmojiEdit(context.Context, *GuildEmojiEditInput) (*GuildEmojiEditOutput, error)
	GuildEmojiDelete(context.Context, *GuildEmojiDeleteInput) (*GuildEmojiDeleteOutput, error)
	GuildTemplate(context.Context, *GuildTemplateInput) (*GuildTemplateOutput, error)
	GuildCreateWithTemplate(context.Context, *GuildCreateWithTemplateInput) (*GuildCreateWithTemplateOutput, error)
	GuildTemplates(context.Context, *GuildTemplatesInput) (*GuildTemplatesOutput, error)
	GuildTemplateCreate(context.Context, *GuildTemplateCreateInput) (*GuildTemplateCreateOutput, error)
	GuildTemplateSync(context.Context, *GuildTemplateSyncInput) (*GuildTemplateSyncOutput, error)
	GuildTemplateEdit(context.Context, *GuildTemplateEditInput) (*GuildTemplateEditOutput, error)
	GuildTemplateDelete(context.Context, *GuildTemplateDeleteInput) (*GuildTemplateDeleteOutput, error)
	Channel(context.Context, *ChannelInput) (*ChannelOutput, error)
	ChannelEdit(context.Context, *ChannelEditInput) (*ChannelEditOutput, error)
	ChannelEditComplex(context.Context, *ChannelEditComplexInput) (*ChannelEditComplexOutput, error)
	ChannelDelete(context.Context, *ChannelDeleteInput) (*ChannelDeleteOutput, error)
	ChannelTyping(context.Context, *ChannelTypingInput) (*ChannelTypingOutput, error)
	ChannelMessages(context.Context, *ChannelMessagesInput) (*ChannelMessagesOutput, error)
	ChannelMessage(context.Context, *ChannelMessageInput) (*ChannelMessageOutput, error)
	ChannelMessageSend(context.Context, *ChannelMessageSendInput) (*ChannelMessageSendOutput, error)
	ChannelMessageSendComplex(context.Context, *ChannelMessageSendComplexInput) (*ChannelMessageSendComplexOutput, error)
	ChannelMessageSendTTS(context.Context, *ChannelMessageSendTTSInput) (*ChannelMessageSendTTSOutput, error)
	ChannelMessageSendEmbed(context.Context, *ChannelMessageSendEmbedInput) (*ChannelMessageSendEmbedOutput, error)
	ChannelMessageSendEmbeds(context.Context, *ChannelMessageSendEmbedsInput) (*ChannelMessageSendEmbedsOutput, error)
	ChannelMessageSendReply(context.Context, *ChannelMessageSendReplyInput) (*ChannelMessageSendReplyOutput, error)
	ChannelMessageSendEmbedReply(context.Context, *ChannelMessageSendEmbedReplyInput) (*ChannelMessageSendEmbedReplyOutput, error)
	ChannelMessageSendEmbedsReply(context.Context, *ChannelMessageSendEmbedsReplyInput) (*ChannelMessageSendEmbedsReplyOutput, error)
	ChannelMessageEdit(context.Context, *ChannelMessageEditInput) (*ChannelMessageEditOutput, error)
	ChannelMessageEditComplex(context.Context, *ChannelMessageEditComplexInput) (*ChannelMessageEditComplexOutput, error)
	ChannelMessageEditEmbed(context.Context, *ChannelMessageEditEmbedInput) (*ChannelMessageEditEmbedOutput, error)
	ChannelMessageEditEmbeds(context.Context, *ChannelMessageEditEmbedsInput) (*ChannelMessageEditEmbedsOutput, error)
	ChannelMessageDelete(context.Context, *ChannelMessageDeleteInput) (*ChannelMessageDeleteOutput, error)
	ChannelMessagesBulkDelete(context.Context, *ChannelMessagesBulkDeleteInput) (*ChannelMessagesBulkDeleteOutput, error)
	ChannelMessagePin(context.Context, *ChannelMessagePinInput) (*ChannelMessagePinOutput, error)
	ChannelMessageUnpin(context.Context, *ChannelMessageUnpinInput) (*ChannelMessageUnpinOutput, error)
	ChannelMessagesPinned(context.Context, *ChannelMessagesPinnedInput) (*ChannelMessagesPinnedOutput, error)
	ChannelFileSend(context.Context, *ChannelFileSendInput) (*ChannelFileSendOutput, error)
	ChannelFileSendWithMessage(context.Context, *ChannelFileSendWithMessageInput) (*ChannelFileSendWithMessageOutput, error)
	ChannelInvites(context.Context, *ChannelInvitesInput) (*ChannelInvitesOutput, error)
	ChannelInviteCreate(context.Context, *ChannelInviteCreateInput) (*ChannelInviteCreateOutput, error)
	ChannelPermissionSet(context.Context, *ChannelPermissionSetInput) (*ChannelPermissionSetOutput, error)
	ChannelPermissionDelete(context.Context, *ChannelPermissionDeleteInput) (*ChannelPermissionDeleteOutput, error)
	ChannelMessageCrosspost(context.Context, *ChannelMessageCrosspostInput) (*ChannelMessageCrosspostOutput, error)
	ChannelNewsFollow(context.Context, *ChannelNewsFollowInput) (*ChannelNewsFollowOutput, error)
	Invite(context.Context, *InviteInput) (*InviteOutput, error)
	InviteWithCounts(context.Context, *InviteWithCountsInput) (*InviteWithCountsOutput, error)
	InviteComplex(context.Context, *InviteComplexInput) (*InviteComplexOutput, error)
	InviteDelete(context.Context, *InviteDeleteInput) (*InviteDeleteOutput, error)
	InviteAccept(context.Context, *InviteAcceptInput) (*InviteAcceptOutput, error)
	VoiceRegions(context.Context, *VoiceRegionsInput) (*VoiceRegionsOutput, error)
	Gateway(context.Context, *GatewayInput) (*GatewayOutput, error)
	GatewayBot(context.Context, *GatewayBotInput) (*GatewayBotOutput, error)
	WebhookCreate(context.Context, *WebhookCreateInput) (*WebhookCreateOutput, error)
	ChannelWebhooks(context.Context, *ChannelWebhooksInput) (*ChannelWebhooksOutput, error)
	GuildWebhooks(context.Context, *GuildWebhooksInput) (*GuildWebhooksOutput, error)
	Webhook(context.Context, *WebhookInput) (*WebhookOutput, error)
	WebhookWithToken(context.Context, *WebhookWithTokenInput) (*WebhookWithTokenOutput, error)
	WebhookEdit(context.Context, *WebhookEditInput) (*WebhookEditOutput, error)
	WebhookEditWithToken(context.Context, *WebhookEditWithTokenInput) (*WebhookEditWithTokenOutput, error)
	WebhookDelete(context.Context, *WebhookDeleteInput) (*WebhookDeleteOutput, error)
	WebhookDeleteWithToken(context.Context, *WebhookDeleteWithTokenInput) (*WebhookDeleteWithTokenOutput, error)
	WebhookExecute(context.Context, *WebhookExecuteInput) (*WebhookExecuteOutput, error)
	WebhookThreadExecute(context.Context, *WebhookThreadExecuteInput) (*WebhookThreadExecuteOutput, error)
	WebhookMessage(context.Context, *WebhookMessageInput) (*WebhookMessageOutput, error)
	WebhookMessageEdit(context.Context, *WebhookMessageEditInput) (*WebhookMessageEditOutput, error)
	WebhookMessageDelete(context.Context, *WebhookMessageDeleteInput) (*WebhookMessageDeleteOutput, error)
	MessageReactionAdd(context.Context, *MessageReactionAddInput) (*MessageReactionAddOutput, error)
	MessageReactionRemove(context.Context, *MessageReactionRemoveInput) (*MessageReactionRemoveOutput, error)
	MessageReactionsRemoveAll(context.Context, *MessageReactionsRemoveAllInput) (*MessageReactionsRemoveAllOutput, error)
	MessageReactionsRemoveEmoji(context.Context, *MessageReactionsRemoveEmojiInput) (*MessageReactionsRemoveEmojiOutput, error)
	MessageReactions(context.Context, *MessageReactionsInput) (*MessageReactionsOutput, error)
	MessageThreadStartComplex(context.Context, *MessageThreadStartComplexInput) (*MessageThreadStartComplexOutput, error)
	MessageThreadStart(context.Context, *MessageThreadStartInput) (*MessageThreadStartOutput, error)
	ThreadStartComplex(context.Context, *ThreadStartComplexInput) (*ThreadStartComplexOutput, error)
	ThreadStart(context.Context, *ThreadStartInput) (*ThreadStartOutput, error)
	ForumThreadStartComplex(context.Context, *ForumThreadStartComplexInput) (*ForumThreadStartComplexOutput, error)
	ForumThreadStart(context.Context, *ForumThreadStartInput) (*ForumThreadStartOutput, error)
	ForumThreadStartEmbed(context.Context, *ForumThreadStartEmbedInput) (*ForumThreadStartEmbedOutput, error)
	ForumThreadStartEmbeds(context.Context, *ForumThreadStartEmbedsInput) (*ForumThreadStartEmbedsOutput, error)
	ThreadJoin(context.Context, *ThreadJoinInput) (*ThreadJoinOutput, error)
	ThreadLeave(context.Context, *ThreadLeaveInput) (*ThreadLeaveOutput, error)
	ThreadMemberAdd(context.Context, *ThreadMemberAddInput) (*ThreadMemberAddOutput, error)
	ThreadMemberRemove(context.Context, *ThreadMemberRemoveInput) (*ThreadMemberRemoveOutput, error)
	ThreadMember(context.Context, *ThreadMemberInput) (*ThreadMemberOutput, error)
	ThreadMembers(context.Context, *ThreadMembersInput) (*ThreadMembersOutput, error)
	ThreadsActive(context.Context, *ThreadsActiveInput) (*ThreadsActiveOutput, error)
	GuildThreadsActive(context.Context, *GuildThreadsActiveInput) (*GuildThreadsActiveOutput, error)
	ThreadsArchived(context.Context, *ThreadsArchivedInput) (*ThreadsArchivedOutput, error)
	ThreadsPrivateArchived(context.Context, *ThreadsPrivateArchivedInput) (*ThreadsPrivateArchivedOutput, error)
	ThreadsPrivateJoinedArchived(context.Context, *ThreadsPrivateJoinedArchivedInput) (*ThreadsPrivateJoinedArchivedOutput, error)
	ApplicationCommandCreate(context.Context, *ApplicationCommandCreateInput) (*ApplicationCommandCreateOutput, error)
	ApplicationCommandEdit(context.Context, *ApplicationCommandEditInput) (*ApplicationCommandEditOutput, error)
	ApplicationCommandBulkOverwrite(context.Context, *ApplicationCommandBulkOverwriteInput) (*ApplicationCommandBulkOverwriteOutput, error)
	ApplicationCommandDelete(context.Context, *ApplicationCommandDeleteInput) (*ApplicationCommandDeleteOutput, error)
	ApplicationCommand(context.Context, *ApplicationCommandInput) (*ApplicationCommandOutput, error)
	ApplicationCommands(context.Context, *ApplicationCommandsInput) (*ApplicationCommandsOutput, error)
	GuildApplicationCommandsPermissions(context.Context, *GuildApplicationCommandsPermissionsInput) (*GuildApplicationCommandsPermissionsOutput, error)
	ApplicationCommandPermissions(context.Context, *ApplicationCommandPermissionsInput) (*ApplicationCommandPermissionsOutput, error)
	ApplicationCommandPermissionsEdit(context.Context, *ApplicationCommandPermissionsEditInput) (*ApplicationCommandPermissionsEditOutput, error)
	ApplicationCommandPermissionsBatchEdit(context.Context, *ApplicationCommandPermissionsBatchEditInput) (*ApplicationCommandPermissionsBatchEditOutput, error)
	InteractionRespond(context.Context, *InteractionRespondInput) (*InteractionRespondOutput, error)
	InteractionResponse(context.Context, *InteractionResponseInput) (*InteractionResponseOutput, error)
	InteractionResponseEdit(context.Context, *InteractionResponseEditInput) (*InteractionResponseEditOutput, error)
	InteractionResponseDelete(context.Context, *InteractionResponseDeleteInput) (*InteractionResponseDeleteOutput, error)
	FollowupMessageCreate(context.Context, *FollowupMessageCreateInput) (*FollowupMessageCreateOutput, error)
	FollowupMessageEdit(context.Context, *FollowupMessageEditInput) (*FollowupMessageEditOutput, error)
	FollowupMessageDelete(context.Context, *FollowupMessageDeleteInput) (*FollowupMessageDeleteOutput, error)
	StageInstanceCreate(context.Context, *StageInstanceCreateInput) (*StageInstanceCreateOutput, error)
	StageInstance(context.Context, *StageInstanceInput) (*StageInstanceOutput, error)
	StageInstanceEdit(context.Context, *StageInstanceEditInput) (*StageInstanceEditOutput, error)
	StageInstanceDelete(context.Context, *StageInstanceDeleteInput) (*StageInstanceDeleteOutput, error)
	GuildScheduledEvents(context.Context, *GuildScheduledEventsInput) (*GuildScheduledEventsOutput, error)
	GuildScheduledEvent(context.Context, *GuildScheduledEventInput) (*GuildScheduledEventOutput, error)
	GuildScheduledEventCreate(context.Context, *GuildScheduledEventCreateInput) (*GuildScheduledEventCreateOutput, error)
	GuildScheduledEventEdit(context.Context, *GuildScheduledEventEditInput) (*GuildScheduledEventEditOutput, error)
	GuildScheduledEventDelete(context.Context, *GuildScheduledEventDeleteInput) (*GuildScheduledEventDeleteOutput, error)
	GuildScheduledEventUsers(context.Context, *GuildScheduledEventUsersInput) (*GuildScheduledEventUsersOutput, error)
	AutoModerationRules(context.Context, *AutoModerationRulesInput) (*AutoModerationRulesOutput, error)
	AutoModerationRule(context.Context, *AutoModerationRuleInput) (*AutoModerationRuleOutput, error)
	AutoModerationRuleCreate(context.Context, *AutoModerationRuleCreateInput) (*AutoModerationRuleCreateOutput, error)
	AutoModerationRuleEdit(context.Context, *AutoModerationRuleEditInput) (*AutoModerationRuleEditOutput, error)
	AutoModerationRuleDelete(context.Context, *AutoModerationRuleDeleteInput) (*AutoModerationRuleDeleteOutput, error)
	ApplicationRoleConnectionMetadata(context.Context, *ApplicationRoleConnectionMetadataInput) (*ApplicationRoleConnectionMetadataOutput, error)
	ApplicationRoleConnectionMetadataUpdate(context.Context, *ApplicationRoleConnectionMetadataUpdateInput) (*ApplicationRoleConnectionMetadataUpdateOutput, error)
	UserApplicationRoleConnection(context.Context, *UserApplicationRoleConnectionInput) (*UserApplicationRoleConnectionOutput, error)
	UserApplicationRoleConnectionUpdate(context.Context, *UserApplicationRoleConnectionUpdateInput) (*UserApplicationRoleConnectionUpdateOutput, error)
	HeartbeatLatency(context.Context, *HeartbeatLatencyInput) (*HeartbeatLatencyOutput, error)
	UpdateGameStatus(context.Context, *UpdateGameStatusInput) (*UpdateGameStatusOutput, error)
	UpdateWatchStatus(context.Context, *UpdateWatchStatusInput) (*UpdateWatchStatusOutput, error)
	UpdateStreamingStatus(context.Context, *UpdateStreamingStatusInput) (*UpdateStreamingStatusOutput, error)
	UpdateListeningStatus(context.Context, *UpdateListeningStatusInput) (*UpdateListeningStatusOutput, error)
	UpdateStatusComplex(context.Context, *UpdateStatusComplexInput) (*UpdateStatusComplexOutput, error)
	RequestGuildMembers(context.Context, *RequestGuildMembersInput) (*RequestGuildMembersOutput, error)
	RequestGuildMembersList(context.Context, *RequestGuildMembersListInput) (*RequestGuildMembersListOutput, error)
	RequestGuildMembersBatch(context.Context, *RequestGuildMembersBatchInput) (*RequestGuildMembersBatchOutput, error)
	RequestGuildMembersBatchList(context.Context, *RequestGuildMembersBatchListInput) (*RequestGuildMembersBatchListOutput, error)
	ChannelVoiceJoinManual(context.Context, *ChannelVoiceJoinManualInput) (*ChannelVoiceJoinManualOutput, error)
	mustEmbedUnimplementedGaywayServer()
}

// UnimplementedGaywayServer must be embedded to have forward compatible implementations.
type UnimplementedGaywayServer struct {
}

func (UnimplementedGaywayServer) Application(context.Context, *ApplicationInput) (*ApplicationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Application not implemented")
}
func (UnimplementedGaywayServer) Applications(context.Context, *ApplicationsInput) (*ApplicationsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Applications not implemented")
}
func (UnimplementedGaywayServer) ApplicationCreate(context.Context, *ApplicationCreateInput) (*ApplicationCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCreate not implemented")
}
func (UnimplementedGaywayServer) ApplicationUpdate(context.Context, *ApplicationUpdateInput) (*ApplicationUpdateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationUpdate not implemented")
}
func (UnimplementedGaywayServer) ApplicationDelete(context.Context, *ApplicationDeleteInput) (*ApplicationDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationDelete not implemented")
}
func (UnimplementedGaywayServer) ApplicationAssets(context.Context, *ApplicationAssetsInput) (*ApplicationAssetsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationAssets not implemented")
}
func (UnimplementedGaywayServer) ApplicationBotCreate(context.Context, *ApplicationBotCreateInput) (*ApplicationBotCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationBotCreate not implemented")
}
func (UnimplementedGaywayServer) Request(context.Context, *RequestInput) (*RequestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedGaywayServer) RequestWithBucketID(context.Context, *RequestWithBucketIDInput) (*RequestWithBucketIDOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWithBucketID not implemented")
}
func (UnimplementedGaywayServer) User(context.Context, *UserInput) (*UserOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (UnimplementedGaywayServer) UserAvatar(context.Context, *UserAvatarInput) (*UserAvatarOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAvatar not implemented")
}
func (UnimplementedGaywayServer) UserAvatarDecode(context.Context, *UserAvatarDecodeInput) (*UserAvatarDecodeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAvatarDecode not implemented")
}
func (UnimplementedGaywayServer) UserUpdate(context.Context, *UserUpdateInput) (*UserUpdateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedGaywayServer) UserConnections(context.Context, *UserConnectionsInput) (*UserConnectionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserConnections not implemented")
}
func (UnimplementedGaywayServer) UserChannelCreate(context.Context, *UserChannelCreateInput) (*UserChannelCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChannelCreate not implemented")
}
func (UnimplementedGaywayServer) UserGuildMember(context.Context, *UserGuildMemberInput) (*UserGuildMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGuildMember not implemented")
}
func (UnimplementedGaywayServer) UserGuilds(context.Context, *UserGuildsInput) (*UserGuildsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGuilds not implemented")
}
func (UnimplementedGaywayServer) UserChannelPermissions(context.Context, *UserChannelPermissionsInput) (*UserChannelPermissionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChannelPermissions not implemented")
}
func (UnimplementedGaywayServer) Guild(context.Context, *GuildInput) (*GuildOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guild not implemented")
}
func (UnimplementedGaywayServer) GuildWithCounts(context.Context, *GuildWithCountsInput) (*GuildWithCountsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildWithCounts not implemented")
}
func (UnimplementedGaywayServer) GuildPreview(context.Context, *GuildPreviewInput) (*GuildPreviewOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildPreview not implemented")
}
func (UnimplementedGaywayServer) GuildCreate(context.Context, *GuildCreateInput) (*GuildCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildCreate not implemented")
}
func (UnimplementedGaywayServer) GuildEdit(context.Context, *GuildEditInput) (*GuildEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildEdit not implemented")
}
func (UnimplementedGaywayServer) GuildDelete(context.Context, *GuildDeleteInput) (*GuildDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildDelete not implemented")
}
func (UnimplementedGaywayServer) GuildLeave(context.Context, *GuildLeaveInput) (*GuildLeaveOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildLeave not implemented")
}
func (UnimplementedGaywayServer) GuildBans(context.Context, *GuildBansInput) (*GuildBansOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildBans not implemented")
}
func (UnimplementedGaywayServer) GuildBanCreate(context.Context, *GuildBanCreateInput) (*GuildBanCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildBanCreate not implemented")
}
func (UnimplementedGaywayServer) GuildBan(context.Context, *GuildBanInput) (*GuildBanOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildBan not implemented")
}
func (UnimplementedGaywayServer) GuildBanCreateWithReason(context.Context, *GuildBanCreateWithReasonInput) (*GuildBanCreateWithReasonOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildBanCreateWithReason not implemented")
}
func (UnimplementedGaywayServer) GuildBanDelete(context.Context, *GuildBanDeleteInput) (*GuildBanDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildBanDelete not implemented")
}
func (UnimplementedGaywayServer) GuildMembers(context.Context, *GuildMembersInput) (*GuildMembersOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembers not implemented")
}
func (UnimplementedGaywayServer) GuildMembersSearch(context.Context, *GuildMembersSearchInput) (*GuildMembersSearchOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembersSearch not implemented")
}
func (UnimplementedGaywayServer) GuildMember(context.Context, *GuildMemberInput) (*GuildMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMember not implemented")
}
func (UnimplementedGaywayServer) GuildMemberAdd(context.Context, *GuildMemberAddInput) (*GuildMemberAddOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberAdd not implemented")
}
func (UnimplementedGaywayServer) GuildMemberDelete(context.Context, *GuildMemberDeleteInput) (*GuildMemberDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberDelete not implemented")
}
func (UnimplementedGaywayServer) GuildMemberDeleteWithReason(context.Context, *GuildMemberDeleteWithReasonInput) (*GuildMemberDeleteWithReasonOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberDeleteWithReason not implemented")
}
func (UnimplementedGaywayServer) GuildMemberEdit(context.Context, *GuildMemberEditInput) (*GuildMemberEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberEdit not implemented")
}
func (UnimplementedGaywayServer) GuildMemberEditComplex(context.Context, *GuildMemberEditComplexInput) (*GuildMemberEditComplexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberEditComplex not implemented")
}
func (UnimplementedGaywayServer) GuildMemberMove(context.Context, *GuildMemberMoveInput) (*GuildMemberMoveOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberMove not implemented")
}
func (UnimplementedGaywayServer) GuildMemberNickname(context.Context, *GuildMemberNicknameInput) (*GuildMemberNicknameOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberNickname not implemented")
}
func (UnimplementedGaywayServer) GuildMemberMute(context.Context, *GuildMemberMuteInput) (*GuildMemberMuteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberMute not implemented")
}
func (UnimplementedGaywayServer) GuildMemberTimeout(context.Context, *GuildMemberTimeoutInput) (*GuildMemberTimeoutOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberTimeout not implemented")
}
func (UnimplementedGaywayServer) GuildMemberDeafen(context.Context, *GuildMemberDeafenInput) (*GuildMemberDeafenOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberDeafen not implemented")
}
func (UnimplementedGaywayServer) GuildMemberRoleAdd(context.Context, *GuildMemberRoleAddInput) (*GuildMemberRoleAddOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberRoleAdd not implemented")
}
func (UnimplementedGaywayServer) GuildMemberRoleRemove(context.Context, *GuildMemberRoleRemoveInput) (*GuildMemberRoleRemoveOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberRoleRemove not implemented")
}
func (UnimplementedGaywayServer) GuildChannels(context.Context, *GuildChannelsInput) (*GuildChannelsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildChannels not implemented")
}
func (UnimplementedGaywayServer) GuildChannelCreateComplex(context.Context, *GuildChannelCreateComplexInput) (*GuildChannelCreateComplexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildChannelCreateComplex not implemented")
}
func (UnimplementedGaywayServer) GuildChannelCreate(context.Context, *GuildChannelCreateInput) (*GuildChannelCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildChannelCreate not implemented")
}
func (UnimplementedGaywayServer) GuildChannelsReorder(context.Context, *GuildChannelsReorderInput) (*GuildChannelsReorderOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildChannelsReorder not implemented")
}
func (UnimplementedGaywayServer) GuildInvites(context.Context, *GuildInvitesInput) (*GuildInvitesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildInvites not implemented")
}
func (UnimplementedGaywayServer) GuildRoles(context.Context, *GuildRolesInput) (*GuildRolesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildRoles not implemented")
}
func (UnimplementedGaywayServer) GuildRoleCreate(context.Context, *GuildRoleCreateInput) (*GuildRoleCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildRoleCreate not implemented")
}
func (UnimplementedGaywayServer) GuildRoleEdit(context.Context, *GuildRoleEditInput) (*GuildRoleEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildRoleEdit not implemented")
}
func (UnimplementedGaywayServer) GuildRoleReorder(context.Context, *GuildRoleReorderInput) (*GuildRoleReorderOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildRoleReorder not implemented")
}
func (UnimplementedGaywayServer) GuildRoleDelete(context.Context, *GuildRoleDeleteInput) (*GuildRoleDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildRoleDelete not implemented")
}
func (UnimplementedGaywayServer) GuildPruneCount(context.Context, *GuildPruneCountInput) (*GuildPruneCountOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildPruneCount not implemented")
}
func (UnimplementedGaywayServer) GuildPrune(context.Context, *GuildPruneInput) (*GuildPruneOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildPrune not implemented")
}
func (UnimplementedGaywayServer) GuildIntegrations(context.Context, *GuildIntegrationsInput) (*GuildIntegrationsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildIntegrations not implemented")
}
func (UnimplementedGaywayServer) GuildIntegrationCreate(context.Context, *GuildIntegrationCreateInput) (*GuildIntegrationCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildIntegrationCreate not implemented")
}
func (UnimplementedGaywayServer) GuildIntegrationEdit(context.Context, *GuildIntegrationEditInput) (*GuildIntegrationEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildIntegrationEdit not implemented")
}
func (UnimplementedGaywayServer) GuildIntegrationDelete(context.Context, *GuildIntegrationDeleteInput) (*GuildIntegrationDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildIntegrationDelete not implemented")
}
func (UnimplementedGaywayServer) GuildIcon(context.Context, *GuildIconInput) (*GuildIconOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildIcon not implemented")
}
func (UnimplementedGaywayServer) GuildSplash(context.Context, *GuildSplashInput) (*GuildSplashOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildSplash not implemented")
}
func (UnimplementedGaywayServer) GuildEmbed(context.Context, *GuildEmbedInput) (*GuildEmbedOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildEmbed not implemented")
}
func (UnimplementedGaywayServer) GuildEmbedEdit(context.Context, *GuildEmbedEditInput) (*GuildEmbedEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildEmbedEdit not implemented")
}
func (UnimplementedGaywayServer) GuildAuditLog(context.Context, *GuildAuditLogInput) (*GuildAuditLogOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildAuditLog not implemented")
}
func (UnimplementedGaywayServer) GuildEmojis(context.Context, *GuildEmojisInput) (*GuildEmojisOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildEmojis not implemented")
}
func (UnimplementedGaywayServer) GuildEmoji(context.Context, *GuildEmojiInput) (*GuildEmojiOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildEmoji not implemented")
}
func (UnimplementedGaywayServer) GuildEmojiCreate(context.Context, *GuildEmojiCreateInput) (*GuildEmojiCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildEmojiCreate not implemented")
}
func (UnimplementedGaywayServer) GuildEmojiEdit(context.Context, *GuildEmojiEditInput) (*GuildEmojiEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildEmojiEdit not implemented")
}
func (UnimplementedGaywayServer) GuildEmojiDelete(context.Context, *GuildEmojiDeleteInput) (*GuildEmojiDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildEmojiDelete not implemented")
}
func (UnimplementedGaywayServer) GuildTemplate(context.Context, *GuildTemplateInput) (*GuildTemplateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildTemplate not implemented")
}
func (UnimplementedGaywayServer) GuildCreateWithTemplate(context.Context, *GuildCreateWithTemplateInput) (*GuildCreateWithTemplateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildCreateWithTemplate not implemented")
}
func (UnimplementedGaywayServer) GuildTemplates(context.Context, *GuildTemplatesInput) (*GuildTemplatesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildTemplates not implemented")
}
func (UnimplementedGaywayServer) GuildTemplateCreate(context.Context, *GuildTemplateCreateInput) (*GuildTemplateCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildTemplateCreate not implemented")
}
func (UnimplementedGaywayServer) GuildTemplateSync(context.Context, *GuildTemplateSyncInput) (*GuildTemplateSyncOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildTemplateSync not implemented")
}
func (UnimplementedGaywayServer) GuildTemplateEdit(context.Context, *GuildTemplateEditInput) (*GuildTemplateEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildTemplateEdit not implemented")
}
func (UnimplementedGaywayServer) GuildTemplateDelete(context.Context, *GuildTemplateDeleteInput) (*GuildTemplateDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildTemplateDelete not implemented")
}
func (UnimplementedGaywayServer) Channel(context.Context, *ChannelInput) (*ChannelOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Channel not implemented")
}
func (UnimplementedGaywayServer) ChannelEdit(context.Context, *ChannelEditInput) (*ChannelEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelEdit not implemented")
}
func (UnimplementedGaywayServer) ChannelEditComplex(context.Context, *ChannelEditComplexInput) (*ChannelEditComplexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelEditComplex not implemented")
}
func (UnimplementedGaywayServer) ChannelDelete(context.Context, *ChannelDeleteInput) (*ChannelDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelDelete not implemented")
}
func (UnimplementedGaywayServer) ChannelTyping(context.Context, *ChannelTypingInput) (*ChannelTypingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelTyping not implemented")
}
func (UnimplementedGaywayServer) ChannelMessages(context.Context, *ChannelMessagesInput) (*ChannelMessagesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessages not implemented")
}
func (UnimplementedGaywayServer) ChannelMessage(context.Context, *ChannelMessageInput) (*ChannelMessageOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessage not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageSend(context.Context, *ChannelMessageSendInput) (*ChannelMessageSendOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageSend not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageSendComplex(context.Context, *ChannelMessageSendComplexInput) (*ChannelMessageSendComplexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageSendComplex not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageSendTTS(context.Context, *ChannelMessageSendTTSInput) (*ChannelMessageSendTTSOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageSendTTS not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageSendEmbed(context.Context, *ChannelMessageSendEmbedInput) (*ChannelMessageSendEmbedOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageSendEmbed not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageSendEmbeds(context.Context, *ChannelMessageSendEmbedsInput) (*ChannelMessageSendEmbedsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageSendEmbeds not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageSendReply(context.Context, *ChannelMessageSendReplyInput) (*ChannelMessageSendReplyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageSendReply not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageSendEmbedReply(context.Context, *ChannelMessageSendEmbedReplyInput) (*ChannelMessageSendEmbedReplyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageSendEmbedReply not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageSendEmbedsReply(context.Context, *ChannelMessageSendEmbedsReplyInput) (*ChannelMessageSendEmbedsReplyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageSendEmbedsReply not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageEdit(context.Context, *ChannelMessageEditInput) (*ChannelMessageEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageEdit not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageEditComplex(context.Context, *ChannelMessageEditComplexInput) (*ChannelMessageEditComplexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageEditComplex not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageEditEmbed(context.Context, *ChannelMessageEditEmbedInput) (*ChannelMessageEditEmbedOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageEditEmbed not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageEditEmbeds(context.Context, *ChannelMessageEditEmbedsInput) (*ChannelMessageEditEmbedsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageEditEmbeds not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageDelete(context.Context, *ChannelMessageDeleteInput) (*ChannelMessageDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageDelete not implemented")
}
func (UnimplementedGaywayServer) ChannelMessagesBulkDelete(context.Context, *ChannelMessagesBulkDeleteInput) (*ChannelMessagesBulkDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessagesBulkDelete not implemented")
}
func (UnimplementedGaywayServer) ChannelMessagePin(context.Context, *ChannelMessagePinInput) (*ChannelMessagePinOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessagePin not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageUnpin(context.Context, *ChannelMessageUnpinInput) (*ChannelMessageUnpinOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageUnpin not implemented")
}
func (UnimplementedGaywayServer) ChannelMessagesPinned(context.Context, *ChannelMessagesPinnedInput) (*ChannelMessagesPinnedOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessagesPinned not implemented")
}
func (UnimplementedGaywayServer) ChannelFileSend(context.Context, *ChannelFileSendInput) (*ChannelFileSendOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelFileSend not implemented")
}
func (UnimplementedGaywayServer) ChannelFileSendWithMessage(context.Context, *ChannelFileSendWithMessageInput) (*ChannelFileSendWithMessageOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelFileSendWithMessage not implemented")
}
func (UnimplementedGaywayServer) ChannelInvites(context.Context, *ChannelInvitesInput) (*ChannelInvitesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelInvites not implemented")
}
func (UnimplementedGaywayServer) ChannelInviteCreate(context.Context, *ChannelInviteCreateInput) (*ChannelInviteCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelInviteCreate not implemented")
}
func (UnimplementedGaywayServer) ChannelPermissionSet(context.Context, *ChannelPermissionSetInput) (*ChannelPermissionSetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelPermissionSet not implemented")
}
func (UnimplementedGaywayServer) ChannelPermissionDelete(context.Context, *ChannelPermissionDeleteInput) (*ChannelPermissionDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelPermissionDelete not implemented")
}
func (UnimplementedGaywayServer) ChannelMessageCrosspost(context.Context, *ChannelMessageCrosspostInput) (*ChannelMessageCrosspostOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageCrosspost not implemented")
}
func (UnimplementedGaywayServer) ChannelNewsFollow(context.Context, *ChannelNewsFollowInput) (*ChannelNewsFollowOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelNewsFollow not implemented")
}
func (UnimplementedGaywayServer) Invite(context.Context, *InviteInput) (*InviteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (UnimplementedGaywayServer) InviteWithCounts(context.Context, *InviteWithCountsInput) (*InviteWithCountsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteWithCounts not implemented")
}
func (UnimplementedGaywayServer) InviteComplex(context.Context, *InviteComplexInput) (*InviteComplexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteComplex not implemented")
}
func (UnimplementedGaywayServer) InviteDelete(context.Context, *InviteDeleteInput) (*InviteDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteDelete not implemented")
}
func (UnimplementedGaywayServer) InviteAccept(context.Context, *InviteAcceptInput) (*InviteAcceptOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteAccept not implemented")
}
func (UnimplementedGaywayServer) VoiceRegions(context.Context, *VoiceRegionsInput) (*VoiceRegionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceRegions not implemented")
}
func (UnimplementedGaywayServer) Gateway(context.Context, *GatewayInput) (*GatewayOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gateway not implemented")
}
func (UnimplementedGaywayServer) GatewayBot(context.Context, *GatewayBotInput) (*GatewayBotOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayBot not implemented")
}
func (UnimplementedGaywayServer) WebhookCreate(context.Context, *WebhookCreateInput) (*WebhookCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookCreate not implemented")
}
func (UnimplementedGaywayServer) ChannelWebhooks(context.Context, *ChannelWebhooksInput) (*ChannelWebhooksOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelWebhooks not implemented")
}
func (UnimplementedGaywayServer) GuildWebhooks(context.Context, *GuildWebhooksInput) (*GuildWebhooksOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildWebhooks not implemented")
}
func (UnimplementedGaywayServer) Webhook(context.Context, *WebhookInput) (*WebhookOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Webhook not implemented")
}
func (UnimplementedGaywayServer) WebhookWithToken(context.Context, *WebhookWithTokenInput) (*WebhookWithTokenOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookWithToken not implemented")
}
func (UnimplementedGaywayServer) WebhookEdit(context.Context, *WebhookEditInput) (*WebhookEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookEdit not implemented")
}
func (UnimplementedGaywayServer) WebhookEditWithToken(context.Context, *WebhookEditWithTokenInput) (*WebhookEditWithTokenOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookEditWithToken not implemented")
}
func (UnimplementedGaywayServer) WebhookDelete(context.Context, *WebhookDeleteInput) (*WebhookDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookDelete not implemented")
}
func (UnimplementedGaywayServer) WebhookDeleteWithToken(context.Context, *WebhookDeleteWithTokenInput) (*WebhookDeleteWithTokenOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookDeleteWithToken not implemented")
}
func (UnimplementedGaywayServer) WebhookExecute(context.Context, *WebhookExecuteInput) (*WebhookExecuteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookExecute not implemented")
}
func (UnimplementedGaywayServer) WebhookThreadExecute(context.Context, *WebhookThreadExecuteInput) (*WebhookThreadExecuteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookThreadExecute not implemented")
}
func (UnimplementedGaywayServer) WebhookMessage(context.Context, *WebhookMessageInput) (*WebhookMessageOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookMessage not implemented")
}
func (UnimplementedGaywayServer) WebhookMessageEdit(context.Context, *WebhookMessageEditInput) (*WebhookMessageEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookMessageEdit not implemented")
}
func (UnimplementedGaywayServer) WebhookMessageDelete(context.Context, *WebhookMessageDeleteInput) (*WebhookMessageDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookMessageDelete not implemented")
}
func (UnimplementedGaywayServer) MessageReactionAdd(context.Context, *MessageReactionAddInput) (*MessageReactionAddOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageReactionAdd not implemented")
}
func (UnimplementedGaywayServer) MessageReactionRemove(context.Context, *MessageReactionRemoveInput) (*MessageReactionRemoveOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageReactionRemove not implemented")
}
func (UnimplementedGaywayServer) MessageReactionsRemoveAll(context.Context, *MessageReactionsRemoveAllInput) (*MessageReactionsRemoveAllOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageReactionsRemoveAll not implemented")
}
func (UnimplementedGaywayServer) MessageReactionsRemoveEmoji(context.Context, *MessageReactionsRemoveEmojiInput) (*MessageReactionsRemoveEmojiOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageReactionsRemoveEmoji not implemented")
}
func (UnimplementedGaywayServer) MessageReactions(context.Context, *MessageReactionsInput) (*MessageReactionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageReactions not implemented")
}
func (UnimplementedGaywayServer) MessageThreadStartComplex(context.Context, *MessageThreadStartComplexInput) (*MessageThreadStartComplexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageThreadStartComplex not implemented")
}
func (UnimplementedGaywayServer) MessageThreadStart(context.Context, *MessageThreadStartInput) (*MessageThreadStartOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageThreadStart not implemented")
}
func (UnimplementedGaywayServer) ThreadStartComplex(context.Context, *ThreadStartComplexInput) (*ThreadStartComplexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadStartComplex not implemented")
}
func (UnimplementedGaywayServer) ThreadStart(context.Context, *ThreadStartInput) (*ThreadStartOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadStart not implemented")
}
func (UnimplementedGaywayServer) ForumThreadStartComplex(context.Context, *ForumThreadStartComplexInput) (*ForumThreadStartComplexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForumThreadStartComplex not implemented")
}
func (UnimplementedGaywayServer) ForumThreadStart(context.Context, *ForumThreadStartInput) (*ForumThreadStartOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForumThreadStart not implemented")
}
func (UnimplementedGaywayServer) ForumThreadStartEmbed(context.Context, *ForumThreadStartEmbedInput) (*ForumThreadStartEmbedOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForumThreadStartEmbed not implemented")
}
func (UnimplementedGaywayServer) ForumThreadStartEmbeds(context.Context, *ForumThreadStartEmbedsInput) (*ForumThreadStartEmbedsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForumThreadStartEmbeds not implemented")
}
func (UnimplementedGaywayServer) ThreadJoin(context.Context, *ThreadJoinInput) (*ThreadJoinOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadJoin not implemented")
}
func (UnimplementedGaywayServer) ThreadLeave(context.Context, *ThreadLeaveInput) (*ThreadLeaveOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadLeave not implemented")
}
func (UnimplementedGaywayServer) ThreadMemberAdd(context.Context, *ThreadMemberAddInput) (*ThreadMemberAddOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadMemberAdd not implemented")
}
func (UnimplementedGaywayServer) ThreadMemberRemove(context.Context, *ThreadMemberRemoveInput) (*ThreadMemberRemoveOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadMemberRemove not implemented")
}
func (UnimplementedGaywayServer) ThreadMember(context.Context, *ThreadMemberInput) (*ThreadMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadMember not implemented")
}
func (UnimplementedGaywayServer) ThreadMembers(context.Context, *ThreadMembersInput) (*ThreadMembersOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadMembers not implemented")
}
func (UnimplementedGaywayServer) ThreadsActive(context.Context, *ThreadsActiveInput) (*ThreadsActiveOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsActive not implemented")
}
func (UnimplementedGaywayServer) GuildThreadsActive(context.Context, *GuildThreadsActiveInput) (*GuildThreadsActiveOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildThreadsActive not implemented")
}
func (UnimplementedGaywayServer) ThreadsArchived(context.Context, *ThreadsArchivedInput) (*ThreadsArchivedOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsArchived not implemented")
}
func (UnimplementedGaywayServer) ThreadsPrivateArchived(context.Context, *ThreadsPrivateArchivedInput) (*ThreadsPrivateArchivedOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsPrivateArchived not implemented")
}
func (UnimplementedGaywayServer) ThreadsPrivateJoinedArchived(context.Context, *ThreadsPrivateJoinedArchivedInput) (*ThreadsPrivateJoinedArchivedOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsPrivateJoinedArchived not implemented")
}
func (UnimplementedGaywayServer) ApplicationCommandCreate(context.Context, *ApplicationCommandCreateInput) (*ApplicationCommandCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCommandCreate not implemented")
}
func (UnimplementedGaywayServer) ApplicationCommandEdit(context.Context, *ApplicationCommandEditInput) (*ApplicationCommandEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCommandEdit not implemented")
}
func (UnimplementedGaywayServer) ApplicationCommandBulkOverwrite(context.Context, *ApplicationCommandBulkOverwriteInput) (*ApplicationCommandBulkOverwriteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCommandBulkOverwrite not implemented")
}
func (UnimplementedGaywayServer) ApplicationCommandDelete(context.Context, *ApplicationCommandDeleteInput) (*ApplicationCommandDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCommandDelete not implemented")
}
func (UnimplementedGaywayServer) ApplicationCommand(context.Context, *ApplicationCommandInput) (*ApplicationCommandOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCommand not implemented")
}
func (UnimplementedGaywayServer) ApplicationCommands(context.Context, *ApplicationCommandsInput) (*ApplicationCommandsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCommands not implemented")
}
func (UnimplementedGaywayServer) GuildApplicationCommandsPermissions(context.Context, *GuildApplicationCommandsPermissionsInput) (*GuildApplicationCommandsPermissionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildApplicationCommandsPermissions not implemented")
}
func (UnimplementedGaywayServer) ApplicationCommandPermissions(context.Context, *ApplicationCommandPermissionsInput) (*ApplicationCommandPermissionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCommandPermissions not implemented")
}
func (UnimplementedGaywayServer) ApplicationCommandPermissionsEdit(context.Context, *ApplicationCommandPermissionsEditInput) (*ApplicationCommandPermissionsEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCommandPermissionsEdit not implemented")
}
func (UnimplementedGaywayServer) ApplicationCommandPermissionsBatchEdit(context.Context, *ApplicationCommandPermissionsBatchEditInput) (*ApplicationCommandPermissionsBatchEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCommandPermissionsBatchEdit not implemented")
}
func (UnimplementedGaywayServer) InteractionRespond(context.Context, *InteractionRespondInput) (*InteractionRespondOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InteractionRespond not implemented")
}
func (UnimplementedGaywayServer) InteractionResponse(context.Context, *InteractionResponseInput) (*InteractionResponseOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InteractionResponse not implemented")
}
func (UnimplementedGaywayServer) InteractionResponseEdit(context.Context, *InteractionResponseEditInput) (*InteractionResponseEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InteractionResponseEdit not implemented")
}
func (UnimplementedGaywayServer) InteractionResponseDelete(context.Context, *InteractionResponseDeleteInput) (*InteractionResponseDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InteractionResponseDelete not implemented")
}
func (UnimplementedGaywayServer) FollowupMessageCreate(context.Context, *FollowupMessageCreateInput) (*FollowupMessageCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowupMessageCreate not implemented")
}
func (UnimplementedGaywayServer) FollowupMessageEdit(context.Context, *FollowupMessageEditInput) (*FollowupMessageEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowupMessageEdit not implemented")
}
func (UnimplementedGaywayServer) FollowupMessageDelete(context.Context, *FollowupMessageDeleteInput) (*FollowupMessageDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowupMessageDelete not implemented")
}
func (UnimplementedGaywayServer) StageInstanceCreate(context.Context, *StageInstanceCreateInput) (*StageInstanceCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageInstanceCreate not implemented")
}
func (UnimplementedGaywayServer) StageInstance(context.Context, *StageInstanceInput) (*StageInstanceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageInstance not implemented")
}
func (UnimplementedGaywayServer) StageInstanceEdit(context.Context, *StageInstanceEditInput) (*StageInstanceEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageInstanceEdit not implemented")
}
func (UnimplementedGaywayServer) StageInstanceDelete(context.Context, *StageInstanceDeleteInput) (*StageInstanceDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageInstanceDelete not implemented")
}
func (UnimplementedGaywayServer) GuildScheduledEvents(context.Context, *GuildScheduledEventsInput) (*GuildScheduledEventsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildScheduledEvents not implemented")
}
func (UnimplementedGaywayServer) GuildScheduledEvent(context.Context, *GuildScheduledEventInput) (*GuildScheduledEventOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildScheduledEvent not implemented")
}
func (UnimplementedGaywayServer) GuildScheduledEventCreate(context.Context, *GuildScheduledEventCreateInput) (*GuildScheduledEventCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildScheduledEventCreate not implemented")
}
func (UnimplementedGaywayServer) GuildScheduledEventEdit(context.Context, *GuildScheduledEventEditInput) (*GuildScheduledEventEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildScheduledEventEdit not implemented")
}
func (UnimplementedGaywayServer) GuildScheduledEventDelete(context.Context, *GuildScheduledEventDeleteInput) (*GuildScheduledEventDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildScheduledEventDelete not implemented")
}
func (UnimplementedGaywayServer) GuildScheduledEventUsers(context.Context, *GuildScheduledEventUsersInput) (*GuildScheduledEventUsersOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildScheduledEventUsers not implemented")
}
func (UnimplementedGaywayServer) AutoModerationRules(context.Context, *AutoModerationRulesInput) (*AutoModerationRulesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoModerationRules not implemented")
}
func (UnimplementedGaywayServer) AutoModerationRule(context.Context, *AutoModerationRuleInput) (*AutoModerationRuleOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoModerationRule not implemented")
}
func (UnimplementedGaywayServer) AutoModerationRuleCreate(context.Context, *AutoModerationRuleCreateInput) (*AutoModerationRuleCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoModerationRuleCreate not implemented")
}
func (UnimplementedGaywayServer) AutoModerationRuleEdit(context.Context, *AutoModerationRuleEditInput) (*AutoModerationRuleEditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoModerationRuleEdit not implemented")
}
func (UnimplementedGaywayServer) AutoModerationRuleDelete(context.Context, *AutoModerationRuleDeleteInput) (*AutoModerationRuleDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoModerationRuleDelete not implemented")
}
func (UnimplementedGaywayServer) ApplicationRoleConnectionMetadata(context.Context, *ApplicationRoleConnectionMetadataInput) (*ApplicationRoleConnectionMetadataOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationRoleConnectionMetadata not implemented")
}
func (UnimplementedGaywayServer) ApplicationRoleConnectionMetadataUpdate(context.Context, *ApplicationRoleConnectionMetadataUpdateInput) (*ApplicationRoleConnectionMetadataUpdateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationRoleConnectionMetadataUpdate not implemented")
}
func (UnimplementedGaywayServer) UserApplicationRoleConnection(context.Context, *UserApplicationRoleConnectionInput) (*UserApplicationRoleConnectionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserApplicationRoleConnection not implemented")
}
func (UnimplementedGaywayServer) UserApplicationRoleConnectionUpdate(context.Context, *UserApplicationRoleConnectionUpdateInput) (*UserApplicationRoleConnectionUpdateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserApplicationRoleConnectionUpdate not implemented")
}
func (UnimplementedGaywayServer) HeartbeatLatency(context.Context, *HeartbeatLatencyInput) (*HeartbeatLatencyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatLatency not implemented")
}
func (UnimplementedGaywayServer) UpdateGameStatus(context.Context, *UpdateGameStatusInput) (*UpdateGameStatusOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameStatus not implemented")
}
func (UnimplementedGaywayServer) UpdateWatchStatus(context.Context, *UpdateWatchStatusInput) (*UpdateWatchStatusOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWatchStatus not implemented")
}
func (UnimplementedGaywayServer) UpdateStreamingStatus(context.Context, *UpdateStreamingStatusInput) (*UpdateStreamingStatusOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamingStatus not implemented")
}
func (UnimplementedGaywayServer) UpdateListeningStatus(context.Context, *UpdateListeningStatusInput) (*UpdateListeningStatusOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListeningStatus not implemented")
}
func (UnimplementedGaywayServer) UpdateStatusComplex(context.Context, *UpdateStatusComplexInput) (*UpdateStatusComplexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusComplex not implemented")
}
func (UnimplementedGaywayServer) RequestGuildMembers(context.Context, *RequestGuildMembersInput) (*RequestGuildMembersOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestGuildMembers not implemented")
}
func (UnimplementedGaywayServer) RequestGuildMembersList(context.Context, *RequestGuildMembersListInput) (*RequestGuildMembersListOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestGuildMembersList not implemented")
}
func (UnimplementedGaywayServer) RequestGuildMembersBatch(context.Context, *RequestGuildMembersBatchInput) (*RequestGuildMembersBatchOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestGuildMembersBatch not implemented")
}
func (UnimplementedGaywayServer) RequestGuildMembersBatchList(context.Context, *RequestGuildMembersBatchListInput) (*RequestGuildMembersBatchListOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestGuildMembersBatchList not implemented")
}
func (UnimplementedGaywayServer) ChannelVoiceJoinManual(context.Context, *ChannelVoiceJoinManualInput) (*ChannelVoiceJoinManualOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelVoiceJoinManual not implemented")
}
func (UnimplementedGaywayServer) mustEmbedUnimplementedGaywayServer() {}

// UnsafeGaywayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GaywayServer will
// result in compilation errors.
type UnsafeGaywayServer interface {
	mustEmbedUnimplementedGaywayServer()
}

func RegisterGaywayServer(s grpc.ServiceRegistrar, srv GaywayServer) {
	s.RegisterService(&Gayway_ServiceDesc, srv)
}

func _Gayway_Application_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).Application(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/Application",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).Application(ctx, req.(*ApplicationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_Applications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).Applications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/Applications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).Applications(ctx, req.(*ApplicationsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationCreate(ctx, req.(*ApplicationCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationUpdate(ctx, req.(*ApplicationUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationDelete(ctx, req.(*ApplicationDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationAssetsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationAssets(ctx, req.(*ApplicationAssetsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationBotCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationBotCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationBotCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationBotCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationBotCreate(ctx, req.(*ApplicationBotCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).Request(ctx, req.(*RequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_RequestWithBucketID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithBucketIDInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).RequestWithBucketID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/RequestWithBucketID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).RequestWithBucketID(ctx, req.(*RequestWithBucketIDInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).User(ctx, req.(*UserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAvatarInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UserAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UserAvatar(ctx, req.(*UserAvatarInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UserAvatarDecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAvatarDecodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UserAvatarDecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UserAvatarDecode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UserAvatarDecode(ctx, req.(*UserAvatarDecodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UserUpdate(ctx, req.(*UserUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UserConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserConnectionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UserConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UserConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UserConnections(ctx, req.(*UserConnectionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UserChannelCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChannelCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UserChannelCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UserChannelCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UserChannelCreate(ctx, req.(*UserChannelCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UserGuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGuildMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UserGuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UserGuildMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UserGuildMember(ctx, req.(*UserGuildMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UserGuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGuildsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UserGuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UserGuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UserGuilds(ctx, req.(*UserGuildsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UserChannelPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChannelPermissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UserChannelPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UserChannelPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UserChannelPermissions(ctx, req.(*UserChannelPermissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_Guild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).Guild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/Guild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).Guild(ctx, req.(*GuildInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildWithCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildWithCountsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildWithCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildWithCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildWithCounts(ctx, req.(*GuildWithCountsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildPreviewInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildPreview(ctx, req.(*GuildPreviewInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildCreate(ctx, req.(*GuildCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildEdit(ctx, req.(*GuildEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildDelete(ctx, req.(*GuildDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildLeaveInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildLeave(ctx, req.(*GuildLeaveInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildBans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildBansInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildBans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildBans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildBans(ctx, req.(*GuildBansInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildBanCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildBanCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildBanCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildBanCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildBanCreate(ctx, req.(*GuildBanCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildBanInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildBan(ctx, req.(*GuildBanInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildBanCreateWithReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildBanCreateWithReasonInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildBanCreateWithReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildBanCreateWithReason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildBanCreateWithReason(ctx, req.(*GuildBanCreateWithReasonInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildBanDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildBanDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildBanDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildBanDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildBanDelete(ctx, req.(*GuildBanDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMembersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMembers(ctx, req.(*GuildMembersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMembersSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMembersSearchInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMembersSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMembersSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMembersSearch(ctx, req.(*GuildMembersSearchInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMember(ctx, req.(*GuildMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMemberAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberAddInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMemberAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMemberAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMemberAdd(ctx, req.(*GuildMemberAddInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMemberDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMemberDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMemberDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMemberDelete(ctx, req.(*GuildMemberDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMemberDeleteWithReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberDeleteWithReasonInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMemberDeleteWithReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMemberDeleteWithReason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMemberDeleteWithReason(ctx, req.(*GuildMemberDeleteWithReasonInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMemberEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMemberEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMemberEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMemberEdit(ctx, req.(*GuildMemberEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMemberEditComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberEditComplexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMemberEditComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMemberEditComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMemberEditComplex(ctx, req.(*GuildMemberEditComplexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMemberMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberMoveInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMemberMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMemberMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMemberMove(ctx, req.(*GuildMemberMoveInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMemberNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberNicknameInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMemberNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMemberNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMemberNickname(ctx, req.(*GuildMemberNicknameInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMemberMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberMuteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMemberMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMemberMute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMemberMute(ctx, req.(*GuildMemberMuteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMemberTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberTimeoutInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMemberTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMemberTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMemberTimeout(ctx, req.(*GuildMemberTimeoutInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMemberDeafen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberDeafenInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMemberDeafen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMemberDeafen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMemberDeafen(ctx, req.(*GuildMemberDeafenInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMemberRoleAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberRoleAddInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMemberRoleAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMemberRoleAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMemberRoleAdd(ctx, req.(*GuildMemberRoleAddInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildMemberRoleRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMemberRoleRemoveInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildMemberRoleRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildMemberRoleRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildMemberRoleRemove(ctx, req.(*GuildMemberRoleRemoveInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildChannelsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildChannels(ctx, req.(*GuildChannelsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildChannelCreateComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildChannelCreateComplexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildChannelCreateComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildChannelCreateComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildChannelCreateComplex(ctx, req.(*GuildChannelCreateComplexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildChannelCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildChannelCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildChannelCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildChannelCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildChannelCreate(ctx, req.(*GuildChannelCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildChannelsReorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildChannelsReorderInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildChannelsReorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildChannelsReorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildChannelsReorder(ctx, req.(*GuildChannelsReorderInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildInvitesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildInvites(ctx, req.(*GuildInvitesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildRolesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildRoles(ctx, req.(*GuildRolesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildRoleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildRoleCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildRoleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildRoleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildRoleCreate(ctx, req.(*GuildRoleCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildRoleEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildRoleEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildRoleEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildRoleEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildRoleEdit(ctx, req.(*GuildRoleEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildRoleReorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildRoleReorderInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildRoleReorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildRoleReorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildRoleReorder(ctx, req.(*GuildRoleReorderInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildRoleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildRoleDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildRoleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildRoleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildRoleDelete(ctx, req.(*GuildRoleDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildPruneCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildPruneCountInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildPruneCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildPruneCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildPruneCount(ctx, req.(*GuildPruneCountInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildPrune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildPruneInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildPrune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildPrune",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildPrune(ctx, req.(*GuildPruneInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildIntegrationsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildIntegrations(ctx, req.(*GuildIntegrationsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildIntegrationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildIntegrationCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildIntegrationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildIntegrationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildIntegrationCreate(ctx, req.(*GuildIntegrationCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildIntegrationEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildIntegrationEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildIntegrationEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildIntegrationEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildIntegrationEdit(ctx, req.(*GuildIntegrationEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildIntegrationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildIntegrationDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildIntegrationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildIntegrationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildIntegrationDelete(ctx, req.(*GuildIntegrationDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildIconInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildIcon(ctx, req.(*GuildIconInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildSplash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildSplashInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildSplash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildSplash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildSplash(ctx, req.(*GuildSplashInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildEmbed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildEmbedInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildEmbed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildEmbed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildEmbed(ctx, req.(*GuildEmbedInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildEmbedEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildEmbedEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildEmbedEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildEmbedEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildEmbedEdit(ctx, req.(*GuildEmbedEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildAuditLogInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildAuditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildAuditLog(ctx, req.(*GuildAuditLogInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildEmojis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildEmojisInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildEmojis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildEmojis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildEmojis(ctx, req.(*GuildEmojisInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildEmojiInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildEmoji(ctx, req.(*GuildEmojiInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildEmojiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildEmojiCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildEmojiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildEmojiCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildEmojiCreate(ctx, req.(*GuildEmojiCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildEmojiEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildEmojiEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildEmojiEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildEmojiEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildEmojiEdit(ctx, req.(*GuildEmojiEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildEmojiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildEmojiDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildEmojiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildEmojiDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildEmojiDelete(ctx, req.(*GuildEmojiDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildTemplateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildTemplate(ctx, req.(*GuildTemplateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildCreateWithTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildCreateWithTemplateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildCreateWithTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildCreateWithTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildCreateWithTemplate(ctx, req.(*GuildCreateWithTemplateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildTemplatesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildTemplates(ctx, req.(*GuildTemplatesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildTemplateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildTemplateCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildTemplateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildTemplateCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildTemplateCreate(ctx, req.(*GuildTemplateCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildTemplateSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildTemplateSyncInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildTemplateSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildTemplateSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildTemplateSync(ctx, req.(*GuildTemplateSyncInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildTemplateEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildTemplateEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildTemplateEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildTemplateEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildTemplateEdit(ctx, req.(*GuildTemplateEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildTemplateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildTemplateDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildTemplateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildTemplateDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildTemplateDelete(ctx, req.(*GuildTemplateDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_Channel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).Channel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/Channel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).Channel(ctx, req.(*ChannelInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelEdit(ctx, req.(*ChannelEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelEditComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelEditComplexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelEditComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelEditComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelEditComplex(ctx, req.(*ChannelEditComplexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelDelete(ctx, req.(*ChannelDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelTypingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelTyping(ctx, req.(*ChannelTypingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessagesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessages(ctx, req.(*ChannelMessagesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessage(ctx, req.(*ChannelMessageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageSendInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageSend(ctx, req.(*ChannelMessageSendInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageSendComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageSendComplexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageSendComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageSendComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageSendComplex(ctx, req.(*ChannelMessageSendComplexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageSendTTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageSendTTSInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageSendTTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageSendTTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageSendTTS(ctx, req.(*ChannelMessageSendTTSInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageSendEmbed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageSendEmbedInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageSendEmbed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageSendEmbed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageSendEmbed(ctx, req.(*ChannelMessageSendEmbedInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageSendEmbeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageSendEmbedsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageSendEmbeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageSendEmbeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageSendEmbeds(ctx, req.(*ChannelMessageSendEmbedsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageSendReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageSendReplyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageSendReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageSendReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageSendReply(ctx, req.(*ChannelMessageSendReplyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageSendEmbedReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageSendEmbedReplyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageSendEmbedReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageSendEmbedReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageSendEmbedReply(ctx, req.(*ChannelMessageSendEmbedReplyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageSendEmbedsReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageSendEmbedsReplyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageSendEmbedsReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageSendEmbedsReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageSendEmbedsReply(ctx, req.(*ChannelMessageSendEmbedsReplyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageEdit(ctx, req.(*ChannelMessageEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageEditComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageEditComplexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageEditComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageEditComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageEditComplex(ctx, req.(*ChannelMessageEditComplexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageEditEmbed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageEditEmbedInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageEditEmbed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageEditEmbed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageEditEmbed(ctx, req.(*ChannelMessageEditEmbedInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageEditEmbeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageEditEmbedsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageEditEmbeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageEditEmbeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageEditEmbeds(ctx, req.(*ChannelMessageEditEmbedsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageDelete(ctx, req.(*ChannelMessageDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessagesBulkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessagesBulkDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessagesBulkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessagesBulkDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessagesBulkDelete(ctx, req.(*ChannelMessagesBulkDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessagePin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessagePinInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessagePin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessagePin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessagePin(ctx, req.(*ChannelMessagePinInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageUnpin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageUnpinInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageUnpin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageUnpin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageUnpin(ctx, req.(*ChannelMessageUnpinInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessagesPinned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessagesPinnedInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessagesPinned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessagesPinned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessagesPinned(ctx, req.(*ChannelMessagesPinnedInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelFileSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelFileSendInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelFileSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelFileSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelFileSend(ctx, req.(*ChannelFileSendInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelFileSendWithMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelFileSendWithMessageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelFileSendWithMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelFileSendWithMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelFileSendWithMessage(ctx, req.(*ChannelFileSendWithMessageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInvitesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelInvites(ctx, req.(*ChannelInvitesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelInviteCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInviteCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelInviteCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelInviteCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelInviteCreate(ctx, req.(*ChannelInviteCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelPermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelPermissionSetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelPermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelPermissionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelPermissionSet(ctx, req.(*ChannelPermissionSetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelPermissionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelPermissionDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelPermissionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelPermissionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelPermissionDelete(ctx, req.(*ChannelPermissionDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelMessageCrosspost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessageCrosspostInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelMessageCrosspost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelMessageCrosspost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelMessageCrosspost(ctx, req.(*ChannelMessageCrosspostInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelNewsFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelNewsFollowInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelNewsFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelNewsFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelNewsFollow(ctx, req.(*ChannelNewsFollowInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).Invite(ctx, req.(*InviteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_InviteWithCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteWithCountsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).InviteWithCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/InviteWithCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).InviteWithCounts(ctx, req.(*InviteWithCountsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_InviteComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteComplexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).InviteComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/InviteComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).InviteComplex(ctx, req.(*InviteComplexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_InviteDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).InviteDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/InviteDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).InviteDelete(ctx, req.(*InviteDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_InviteAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteAcceptInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).InviteAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/InviteAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).InviteAccept(ctx, req.(*InviteAcceptInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_VoiceRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceRegionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).VoiceRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/VoiceRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).VoiceRegions(ctx, req.(*VoiceRegionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_Gateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).Gateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/Gateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).Gateway(ctx, req.(*GatewayInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GatewayBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayBotInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GatewayBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GatewayBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GatewayBot(ctx, req.(*GatewayBotInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_WebhookCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).WebhookCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/WebhookCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).WebhookCreate(ctx, req.(*WebhookCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelWebhooksInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelWebhooks(ctx, req.(*ChannelWebhooksInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildWebhooksInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildWebhooks(ctx, req.(*GuildWebhooksInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_Webhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).Webhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/Webhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).Webhook(ctx, req.(*WebhookInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_WebhookWithToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookWithTokenInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).WebhookWithToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/WebhookWithToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).WebhookWithToken(ctx, req.(*WebhookWithTokenInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_WebhookEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).WebhookEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/WebhookEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).WebhookEdit(ctx, req.(*WebhookEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_WebhookEditWithToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookEditWithTokenInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).WebhookEditWithToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/WebhookEditWithToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).WebhookEditWithToken(ctx, req.(*WebhookEditWithTokenInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_WebhookDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).WebhookDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/WebhookDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).WebhookDelete(ctx, req.(*WebhookDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_WebhookDeleteWithToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookDeleteWithTokenInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).WebhookDeleteWithToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/WebhookDeleteWithToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).WebhookDeleteWithToken(ctx, req.(*WebhookDeleteWithTokenInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_WebhookExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookExecuteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).WebhookExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/WebhookExecute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).WebhookExecute(ctx, req.(*WebhookExecuteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_WebhookThreadExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookThreadExecuteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).WebhookThreadExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/WebhookThreadExecute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).WebhookThreadExecute(ctx, req.(*WebhookThreadExecuteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_WebhookMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookMessageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).WebhookMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/WebhookMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).WebhookMessage(ctx, req.(*WebhookMessageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_WebhookMessageEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookMessageEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).WebhookMessageEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/WebhookMessageEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).WebhookMessageEdit(ctx, req.(*WebhookMessageEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_WebhookMessageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookMessageDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).WebhookMessageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/WebhookMessageDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).WebhookMessageDelete(ctx, req.(*WebhookMessageDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_MessageReactionAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReactionAddInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).MessageReactionAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/MessageReactionAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).MessageReactionAdd(ctx, req.(*MessageReactionAddInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_MessageReactionRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReactionRemoveInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).MessageReactionRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/MessageReactionRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).MessageReactionRemove(ctx, req.(*MessageReactionRemoveInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_MessageReactionsRemoveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReactionsRemoveAllInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).MessageReactionsRemoveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/MessageReactionsRemoveAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).MessageReactionsRemoveAll(ctx, req.(*MessageReactionsRemoveAllInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_MessageReactionsRemoveEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReactionsRemoveEmojiInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).MessageReactionsRemoveEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/MessageReactionsRemoveEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).MessageReactionsRemoveEmoji(ctx, req.(*MessageReactionsRemoveEmojiInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_MessageReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReactionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).MessageReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/MessageReactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).MessageReactions(ctx, req.(*MessageReactionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_MessageThreadStartComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageThreadStartComplexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).MessageThreadStartComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/MessageThreadStartComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).MessageThreadStartComplex(ctx, req.(*MessageThreadStartComplexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_MessageThreadStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageThreadStartInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).MessageThreadStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/MessageThreadStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).MessageThreadStart(ctx, req.(*MessageThreadStartInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ThreadStartComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadStartComplexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ThreadStartComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ThreadStartComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ThreadStartComplex(ctx, req.(*ThreadStartComplexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ThreadStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadStartInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ThreadStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ThreadStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ThreadStart(ctx, req.(*ThreadStartInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ForumThreadStartComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumThreadStartComplexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ForumThreadStartComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ForumThreadStartComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ForumThreadStartComplex(ctx, req.(*ForumThreadStartComplexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ForumThreadStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumThreadStartInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ForumThreadStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ForumThreadStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ForumThreadStart(ctx, req.(*ForumThreadStartInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ForumThreadStartEmbed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumThreadStartEmbedInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ForumThreadStartEmbed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ForumThreadStartEmbed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ForumThreadStartEmbed(ctx, req.(*ForumThreadStartEmbedInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ForumThreadStartEmbeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumThreadStartEmbedsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ForumThreadStartEmbeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ForumThreadStartEmbeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ForumThreadStartEmbeds(ctx, req.(*ForumThreadStartEmbedsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ThreadJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadJoinInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ThreadJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ThreadJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ThreadJoin(ctx, req.(*ThreadJoinInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ThreadLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadLeaveInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ThreadLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ThreadLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ThreadLeave(ctx, req.(*ThreadLeaveInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ThreadMemberAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadMemberAddInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ThreadMemberAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ThreadMemberAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ThreadMemberAdd(ctx, req.(*ThreadMemberAddInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ThreadMemberRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadMemberRemoveInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ThreadMemberRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ThreadMemberRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ThreadMemberRemove(ctx, req.(*ThreadMemberRemoveInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ThreadMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ThreadMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ThreadMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ThreadMember(ctx, req.(*ThreadMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ThreadMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadMembersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ThreadMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ThreadMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ThreadMembers(ctx, req.(*ThreadMembersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ThreadsActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsActiveInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ThreadsActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ThreadsActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ThreadsActive(ctx, req.(*ThreadsActiveInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildThreadsActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildThreadsActiveInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildThreadsActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildThreadsActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildThreadsActive(ctx, req.(*GuildThreadsActiveInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ThreadsArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsArchivedInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ThreadsArchived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ThreadsArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ThreadsArchived(ctx, req.(*ThreadsArchivedInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ThreadsPrivateArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsPrivateArchivedInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ThreadsPrivateArchived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ThreadsPrivateArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ThreadsPrivateArchived(ctx, req.(*ThreadsPrivateArchivedInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ThreadsPrivateJoinedArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsPrivateJoinedArchivedInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ThreadsPrivateJoinedArchived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ThreadsPrivateJoinedArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ThreadsPrivateJoinedArchived(ctx, req.(*ThreadsPrivateJoinedArchivedInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationCommandCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCommandCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationCommandCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationCommandCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationCommandCreate(ctx, req.(*ApplicationCommandCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationCommandEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCommandEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationCommandEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationCommandEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationCommandEdit(ctx, req.(*ApplicationCommandEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationCommandBulkOverwrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCommandBulkOverwriteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationCommandBulkOverwrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationCommandBulkOverwrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationCommandBulkOverwrite(ctx, req.(*ApplicationCommandBulkOverwriteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationCommandDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCommandDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationCommandDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationCommandDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationCommandDelete(ctx, req.(*ApplicationCommandDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationCommand(ctx, req.(*ApplicationCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCommandsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationCommands(ctx, req.(*ApplicationCommandsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildApplicationCommandsPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildApplicationCommandsPermissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildApplicationCommandsPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildApplicationCommandsPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildApplicationCommandsPermissions(ctx, req.(*GuildApplicationCommandsPermissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationCommandPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCommandPermissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationCommandPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationCommandPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationCommandPermissions(ctx, req.(*ApplicationCommandPermissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationCommandPermissionsEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCommandPermissionsEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationCommandPermissionsEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationCommandPermissionsEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationCommandPermissionsEdit(ctx, req.(*ApplicationCommandPermissionsEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationCommandPermissionsBatchEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCommandPermissionsBatchEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationCommandPermissionsBatchEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationCommandPermissionsBatchEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationCommandPermissionsBatchEdit(ctx, req.(*ApplicationCommandPermissionsBatchEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_InteractionRespond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionRespondInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).InteractionRespond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/InteractionRespond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).InteractionRespond(ctx, req.(*InteractionRespondInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_InteractionResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionResponseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).InteractionResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/InteractionResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).InteractionResponse(ctx, req.(*InteractionResponseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_InteractionResponseEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionResponseEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).InteractionResponseEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/InteractionResponseEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).InteractionResponseEdit(ctx, req.(*InteractionResponseEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_InteractionResponseDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionResponseDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).InteractionResponseDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/InteractionResponseDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).InteractionResponseDelete(ctx, req.(*InteractionResponseDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_FollowupMessageCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowupMessageCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).FollowupMessageCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/FollowupMessageCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).FollowupMessageCreate(ctx, req.(*FollowupMessageCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_FollowupMessageEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowupMessageEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).FollowupMessageEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/FollowupMessageEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).FollowupMessageEdit(ctx, req.(*FollowupMessageEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_FollowupMessageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowupMessageDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).FollowupMessageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/FollowupMessageDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).FollowupMessageDelete(ctx, req.(*FollowupMessageDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_StageInstanceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageInstanceCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).StageInstanceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/StageInstanceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).StageInstanceCreate(ctx, req.(*StageInstanceCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_StageInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageInstanceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).StageInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/StageInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).StageInstance(ctx, req.(*StageInstanceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_StageInstanceEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageInstanceEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).StageInstanceEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/StageInstanceEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).StageInstanceEdit(ctx, req.(*StageInstanceEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_StageInstanceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageInstanceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).StageInstanceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/StageInstanceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).StageInstanceDelete(ctx, req.(*StageInstanceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildScheduledEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildScheduledEventsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildScheduledEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildScheduledEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildScheduledEvents(ctx, req.(*GuildScheduledEventsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildScheduledEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildScheduledEventInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildScheduledEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildScheduledEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildScheduledEvent(ctx, req.(*GuildScheduledEventInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildScheduledEventCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildScheduledEventCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildScheduledEventCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildScheduledEventCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildScheduledEventCreate(ctx, req.(*GuildScheduledEventCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildScheduledEventEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildScheduledEventEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildScheduledEventEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildScheduledEventEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildScheduledEventEdit(ctx, req.(*GuildScheduledEventEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildScheduledEventDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildScheduledEventDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildScheduledEventDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildScheduledEventDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildScheduledEventDelete(ctx, req.(*GuildScheduledEventDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_GuildScheduledEventUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildScheduledEventUsersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).GuildScheduledEventUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/GuildScheduledEventUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).GuildScheduledEventUsers(ctx, req.(*GuildScheduledEventUsersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_AutoModerationRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoModerationRulesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).AutoModerationRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/AutoModerationRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).AutoModerationRules(ctx, req.(*AutoModerationRulesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_AutoModerationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoModerationRuleInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).AutoModerationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/AutoModerationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).AutoModerationRule(ctx, req.(*AutoModerationRuleInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_AutoModerationRuleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoModerationRuleCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).AutoModerationRuleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/AutoModerationRuleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).AutoModerationRuleCreate(ctx, req.(*AutoModerationRuleCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_AutoModerationRuleEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoModerationRuleEditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).AutoModerationRuleEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/AutoModerationRuleEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).AutoModerationRuleEdit(ctx, req.(*AutoModerationRuleEditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_AutoModerationRuleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoModerationRuleDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).AutoModerationRuleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/AutoModerationRuleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).AutoModerationRuleDelete(ctx, req.(*AutoModerationRuleDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationRoleConnectionMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRoleConnectionMetadataInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationRoleConnectionMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationRoleConnectionMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationRoleConnectionMetadata(ctx, req.(*ApplicationRoleConnectionMetadataInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ApplicationRoleConnectionMetadataUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRoleConnectionMetadataUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ApplicationRoleConnectionMetadataUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ApplicationRoleConnectionMetadataUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ApplicationRoleConnectionMetadataUpdate(ctx, req.(*ApplicationRoleConnectionMetadataUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UserApplicationRoleConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserApplicationRoleConnectionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UserApplicationRoleConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UserApplicationRoleConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UserApplicationRoleConnection(ctx, req.(*UserApplicationRoleConnectionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UserApplicationRoleConnectionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserApplicationRoleConnectionUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UserApplicationRoleConnectionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UserApplicationRoleConnectionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UserApplicationRoleConnectionUpdate(ctx, req.(*UserApplicationRoleConnectionUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_HeartbeatLatency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatLatencyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).HeartbeatLatency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/HeartbeatLatency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).HeartbeatLatency(ctx, req.(*HeartbeatLatencyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UpdateGameStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameStatusInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UpdateGameStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UpdateGameStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UpdateGameStatus(ctx, req.(*UpdateGameStatusInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UpdateWatchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWatchStatusInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UpdateWatchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UpdateWatchStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UpdateWatchStatus(ctx, req.(*UpdateWatchStatusInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UpdateStreamingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamingStatusInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UpdateStreamingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UpdateStreamingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UpdateStreamingStatus(ctx, req.(*UpdateStreamingStatusInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UpdateListeningStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListeningStatusInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UpdateListeningStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UpdateListeningStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UpdateListeningStatus(ctx, req.(*UpdateListeningStatusInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_UpdateStatusComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusComplexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).UpdateStatusComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/UpdateStatusComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).UpdateStatusComplex(ctx, req.(*UpdateStatusComplexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_RequestGuildMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGuildMembersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).RequestGuildMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/RequestGuildMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).RequestGuildMembers(ctx, req.(*RequestGuildMembersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_RequestGuildMembersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGuildMembersListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).RequestGuildMembersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/RequestGuildMembersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).RequestGuildMembersList(ctx, req.(*RequestGuildMembersListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_RequestGuildMembersBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGuildMembersBatchInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).RequestGuildMembersBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/RequestGuildMembersBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).RequestGuildMembersBatch(ctx, req.(*RequestGuildMembersBatchInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_RequestGuildMembersBatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGuildMembersBatchListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).RequestGuildMembersBatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/RequestGuildMembersBatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).RequestGuildMembersBatchList(ctx, req.(*RequestGuildMembersBatchListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gayway_ChannelVoiceJoinManual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelVoiceJoinManualInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaywayServer).ChannelVoiceJoinManual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gayway/ChannelVoiceJoinManual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaywayServer).ChannelVoiceJoinManual(ctx, req.(*ChannelVoiceJoinManualInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Gayway_ServiceDesc is the grpc.ServiceDesc for Gayway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gayway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Gayway",
	HandlerType: (*GaywayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Application",
			Handler:    _Gayway_Application_Handler,
		},
		{
			MethodName: "Applications",
			Handler:    _Gayway_Applications_Handler,
		},
		{
			MethodName: "ApplicationCreate",
			Handler:    _Gayway_ApplicationCreate_Handler,
		},
		{
			MethodName: "ApplicationUpdate",
			Handler:    _Gayway_ApplicationUpdate_Handler,
		},
		{
			MethodName: "ApplicationDelete",
			Handler:    _Gayway_ApplicationDelete_Handler,
		},
		{
			MethodName: "ApplicationAssets",
			Handler:    _Gayway_ApplicationAssets_Handler,
		},
		{
			MethodName: "ApplicationBotCreate",
			Handler:    _Gayway_ApplicationBotCreate_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _Gayway_Request_Handler,
		},
		{
			MethodName: "RequestWithBucketID",
			Handler:    _Gayway_RequestWithBucketID_Handler,
		},
		{
			MethodName: "User",
			Handler:    _Gayway_User_Handler,
		},
		{
			MethodName: "UserAvatar",
			Handler:    _Gayway_UserAvatar_Handler,
		},
		{
			MethodName: "UserAvatarDecode",
			Handler:    _Gayway_UserAvatarDecode_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _Gayway_UserUpdate_Handler,
		},
		{
			MethodName: "UserConnections",
			Handler:    _Gayway_UserConnections_Handler,
		},
		{
			MethodName: "UserChannelCreate",
			Handler:    _Gayway_UserChannelCreate_Handler,
		},
		{
			MethodName: "UserGuildMember",
			Handler:    _Gayway_UserGuildMember_Handler,
		},
		{
			MethodName: "UserGuilds",
			Handler:    _Gayway_UserGuilds_Handler,
		},
		{
			MethodName: "UserChannelPermissions",
			Handler:    _Gayway_UserChannelPermissions_Handler,
		},
		{
			MethodName: "Guild",
			Handler:    _Gayway_Guild_Handler,
		},
		{
			MethodName: "GuildWithCounts",
			Handler:    _Gayway_GuildWithCounts_Handler,
		},
		{
			MethodName: "GuildPreview",
			Handler:    _Gayway_GuildPreview_Handler,
		},
		{
			MethodName: "GuildCreate",
			Handler:    _Gayway_GuildCreate_Handler,
		},
		{
			MethodName: "GuildEdit",
			Handler:    _Gayway_GuildEdit_Handler,
		},
		{
			MethodName: "GuildDelete",
			Handler:    _Gayway_GuildDelete_Handler,
		},
		{
			MethodName: "GuildLeave",
			Handler:    _Gayway_GuildLeave_Handler,
		},
		{
			MethodName: "GuildBans",
			Handler:    _Gayway_GuildBans_Handler,
		},
		{
			MethodName: "GuildBanCreate",
			Handler:    _Gayway_GuildBanCreate_Handler,
		},
		{
			MethodName: "GuildBan",
			Handler:    _Gayway_GuildBan_Handler,
		},
		{
			MethodName: "GuildBanCreateWithReason",
			Handler:    _Gayway_GuildBanCreateWithReason_Handler,
		},
		{
			MethodName: "GuildBanDelete",
			Handler:    _Gayway_GuildBanDelete_Handler,
		},
		{
			MethodName: "GuildMembers",
			Handler:    _Gayway_GuildMembers_Handler,
		},
		{
			MethodName: "GuildMembersSearch",
			Handler:    _Gayway_GuildMembersSearch_Handler,
		},
		{
			MethodName: "GuildMember",
			Handler:    _Gayway_GuildMember_Handler,
		},
		{
			MethodName: "GuildMemberAdd",
			Handler:    _Gayway_GuildMemberAdd_Handler,
		},
		{
			MethodName: "GuildMemberDelete",
			Handler:    _Gayway_GuildMemberDelete_Handler,
		},
		{
			MethodName: "GuildMemberDeleteWithReason",
			Handler:    _Gayway_GuildMemberDeleteWithReason_Handler,
		},
		{
			MethodName: "GuildMemberEdit",
			Handler:    _Gayway_GuildMemberEdit_Handler,
		},
		{
			MethodName: "GuildMemberEditComplex",
			Handler:    _Gayway_GuildMemberEditComplex_Handler,
		},
		{
			MethodName: "GuildMemberMove",
			Handler:    _Gayway_GuildMemberMove_Handler,
		},
		{
			MethodName: "GuildMemberNickname",
			Handler:    _Gayway_GuildMemberNickname_Handler,
		},
		{
			MethodName: "GuildMemberMute",
			Handler:    _Gayway_GuildMemberMute_Handler,
		},
		{
			MethodName: "GuildMemberTimeout",
			Handler:    _Gayway_GuildMemberTimeout_Handler,
		},
		{
			MethodName: "GuildMemberDeafen",
			Handler:    _Gayway_GuildMemberDeafen_Handler,
		},
		{
			MethodName: "GuildMemberRoleAdd",
			Handler:    _Gayway_GuildMemberRoleAdd_Handler,
		},
		{
			MethodName: "GuildMemberRoleRemove",
			Handler:    _Gayway_GuildMemberRoleRemove_Handler,
		},
		{
			MethodName: "GuildChannels",
			Handler:    _Gayway_GuildChannels_Handler,
		},
		{
			MethodName: "GuildChannelCreateComplex",
			Handler:    _Gayway_GuildChannelCreateComplex_Handler,
		},
		{
			MethodName: "GuildChannelCreate",
			Handler:    _Gayway_GuildChannelCreate_Handler,
		},
		{
			MethodName: "GuildChannelsReorder",
			Handler:    _Gayway_GuildChannelsReorder_Handler,
		},
		{
			MethodName: "GuildInvites",
			Handler:    _Gayway_GuildInvites_Handler,
		},
		{
			MethodName: "GuildRoles",
			Handler:    _Gayway_GuildRoles_Handler,
		},
		{
			MethodName: "GuildRoleCreate",
			Handler:    _Gayway_GuildRoleCreate_Handler,
		},
		{
			MethodName: "GuildRoleEdit",
			Handler:    _Gayway_GuildRoleEdit_Handler,
		},
		{
			MethodName: "GuildRoleReorder",
			Handler:    _Gayway_GuildRoleReorder_Handler,
		},
		{
			MethodName: "GuildRoleDelete",
			Handler:    _Gayway_GuildRoleDelete_Handler,
		},
		{
			MethodName: "GuildPruneCount",
			Handler:    _Gayway_GuildPruneCount_Handler,
		},
		{
			MethodName: "GuildPrune",
			Handler:    _Gayway_GuildPrune_Handler,
		},
		{
			MethodName: "GuildIntegrations",
			Handler:    _Gayway_GuildIntegrations_Handler,
		},
		{
			MethodName: "GuildIntegrationCreate",
			Handler:    _Gayway_GuildIntegrationCreate_Handler,
		},
		{
			MethodName: "GuildIntegrationEdit",
			Handler:    _Gayway_GuildIntegrationEdit_Handler,
		},
		{
			MethodName: "GuildIntegrationDelete",
			Handler:    _Gayway_GuildIntegrationDelete_Handler,
		},
		{
			MethodName: "GuildIcon",
			Handler:    _Gayway_GuildIcon_Handler,
		},
		{
			MethodName: "GuildSplash",
			Handler:    _Gayway_GuildSplash_Handler,
		},
		{
			MethodName: "GuildEmbed",
			Handler:    _Gayway_GuildEmbed_Handler,
		},
		{
			MethodName: "GuildEmbedEdit",
			Handler:    _Gayway_GuildEmbedEdit_Handler,
		},
		{
			MethodName: "GuildAuditLog",
			Handler:    _Gayway_GuildAuditLog_Handler,
		},
		{
			MethodName: "GuildEmojis",
			Handler:    _Gayway_GuildEmojis_Handler,
		},
		{
			MethodName: "GuildEmoji",
			Handler:    _Gayway_GuildEmoji_Handler,
		},
		{
			MethodName: "GuildEmojiCreate",
			Handler:    _Gayway_GuildEmojiCreate_Handler,
		},
		{
			MethodName: "GuildEmojiEdit",
			Handler:    _Gayway_GuildEmojiEdit_Handler,
		},
		{
			MethodName: "GuildEmojiDelete",
			Handler:    _Gayway_GuildEmojiDelete_Handler,
		},
		{
			MethodName: "GuildTemplate",
			Handler:    _Gayway_GuildTemplate_Handler,
		},
		{
			MethodName: "GuildCreateWithTemplate",
			Handler:    _Gayway_GuildCreateWithTemplate_Handler,
		},
		{
			MethodName: "GuildTemplates",
			Handler:    _Gayway_GuildTemplates_Handler,
		},
		{
			MethodName: "GuildTemplateCreate",
			Handler:    _Gayway_GuildTemplateCreate_Handler,
		},
		{
			MethodName: "GuildTemplateSync",
			Handler:    _Gayway_GuildTemplateSync_Handler,
		},
		{
			MethodName: "GuildTemplateEdit",
			Handler:    _Gayway_GuildTemplateEdit_Handler,
		},
		{
			MethodName: "GuildTemplateDelete",
			Handler:    _Gayway_GuildTemplateDelete_Handler,
		},
		{
			MethodName: "Channel",
			Handler:    _Gayway_Channel_Handler,
		},
		{
			MethodName: "ChannelEdit",
			Handler:    _Gayway_ChannelEdit_Handler,
		},
		{
			MethodName: "ChannelEditComplex",
			Handler:    _Gayway_ChannelEditComplex_Handler,
		},
		{
			MethodName: "ChannelDelete",
			Handler:    _Gayway_ChannelDelete_Handler,
		},
		{
			MethodName: "ChannelTyping",
			Handler:    _Gayway_ChannelTyping_Handler,
		},
		{
			MethodName: "ChannelMessages",
			Handler:    _Gayway_ChannelMessages_Handler,
		},
		{
			MethodName: "ChannelMessage",
			Handler:    _Gayway_ChannelMessage_Handler,
		},
		{
			MethodName: "ChannelMessageSend",
			Handler:    _Gayway_ChannelMessageSend_Handler,
		},
		{
			MethodName: "ChannelMessageSendComplex",
			Handler:    _Gayway_ChannelMessageSendComplex_Handler,
		},
		{
			MethodName: "ChannelMessageSendTTS",
			Handler:    _Gayway_ChannelMessageSendTTS_Handler,
		},
		{
			MethodName: "ChannelMessageSendEmbed",
			Handler:    _Gayway_ChannelMessageSendEmbed_Handler,
		},
		{
			MethodName: "ChannelMessageSendEmbeds",
			Handler:    _Gayway_ChannelMessageSendEmbeds_Handler,
		},
		{
			MethodName: "ChannelMessageSendReply",
			Handler:    _Gayway_ChannelMessageSendReply_Handler,
		},
		{
			MethodName: "ChannelMessageSendEmbedReply",
			Handler:    _Gayway_ChannelMessageSendEmbedReply_Handler,
		},
		{
			MethodName: "ChannelMessageSendEmbedsReply",
			Handler:    _Gayway_ChannelMessageSendEmbedsReply_Handler,
		},
		{
			MethodName: "ChannelMessageEdit",
			Handler:    _Gayway_ChannelMessageEdit_Handler,
		},
		{
			MethodName: "ChannelMessageEditComplex",
			Handler:    _Gayway_ChannelMessageEditComplex_Handler,
		},
		{
			MethodName: "ChannelMessageEditEmbed",
			Handler:    _Gayway_ChannelMessageEditEmbed_Handler,
		},
		{
			MethodName: "ChannelMessageEditEmbeds",
			Handler:    _Gayway_ChannelMessageEditEmbeds_Handler,
		},
		{
			MethodName: "ChannelMessageDelete",
			Handler:    _Gayway_ChannelMessageDelete_Handler,
		},
		{
			MethodName: "ChannelMessagesBulkDelete",
			Handler:    _Gayway_ChannelMessagesBulkDelete_Handler,
		},
		{
			MethodName: "ChannelMessagePin",
			Handler:    _Gayway_ChannelMessagePin_Handler,
		},
		{
			MethodName: "ChannelMessageUnpin",
			Handler:    _Gayway_ChannelMessageUnpin_Handler,
		},
		{
			MethodName: "ChannelMessagesPinned",
			Handler:    _Gayway_ChannelMessagesPinned_Handler,
		},
		{
			MethodName: "ChannelFileSend",
			Handler:    _Gayway_ChannelFileSend_Handler,
		},
		{
			MethodName: "ChannelFileSendWithMessage",
			Handler:    _Gayway_ChannelFileSendWithMessage_Handler,
		},
		{
			MethodName: "ChannelInvites",
			Handler:    _Gayway_ChannelInvites_Handler,
		},
		{
			MethodName: "ChannelInviteCreate",
			Handler:    _Gayway_ChannelInviteCreate_Handler,
		},
		{
			MethodName: "ChannelPermissionSet",
			Handler:    _Gayway_ChannelPermissionSet_Handler,
		},
		{
			MethodName: "ChannelPermissionDelete",
			Handler:    _Gayway_ChannelPermissionDelete_Handler,
		},
		{
			MethodName: "ChannelMessageCrosspost",
			Handler:    _Gayway_ChannelMessageCrosspost_Handler,
		},
		{
			MethodName: "ChannelNewsFollow",
			Handler:    _Gayway_ChannelNewsFollow_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _Gayway_Invite_Handler,
		},
		{
			MethodName: "InviteWithCounts",
			Handler:    _Gayway_InviteWithCounts_Handler,
		},
		{
			MethodName: "InviteComplex",
			Handler:    _Gayway_InviteComplex_Handler,
		},
		{
			MethodName: "InviteDelete",
			Handler:    _Gayway_InviteDelete_Handler,
		},
		{
			MethodName: "InviteAccept",
			Handler:    _Gayway_InviteAccept_Handler,
		},
		{
			MethodName: "VoiceRegions",
			Handler:    _Gayway_VoiceRegions_Handler,
		},
		{
			MethodName: "Gateway",
			Handler:    _Gayway_Gateway_Handler,
		},
		{
			MethodName: "GatewayBot",
			Handler:    _Gayway_GatewayBot_Handler,
		},
		{
			MethodName: "WebhookCreate",
			Handler:    _Gayway_WebhookCreate_Handler,
		},
		{
			MethodName: "ChannelWebhooks",
			Handler:    _Gayway_ChannelWebhooks_Handler,
		},
		{
			MethodName: "GuildWebhooks",
			Handler:    _Gayway_GuildWebhooks_Handler,
		},
		{
			MethodName: "Webhook",
			Handler:    _Gayway_Webhook_Handler,
		},
		{
			MethodName: "WebhookWithToken",
			Handler:    _Gayway_WebhookWithToken_Handler,
		},
		{
			MethodName: "WebhookEdit",
			Handler:    _Gayway_WebhookEdit_Handler,
		},
		{
			MethodName: "WebhookEditWithToken",
			Handler:    _Gayway_WebhookEditWithToken_Handler,
		},
		{
			MethodName: "WebhookDelete",
			Handler:    _Gayway_WebhookDelete_Handler,
		},
		{
			MethodName: "WebhookDeleteWithToken",
			Handler:    _Gayway_WebhookDeleteWithToken_Handler,
		},
		{
			MethodName: "WebhookExecute",
			Handler:    _Gayway_WebhookExecute_Handler,
		},
		{
			MethodName: "WebhookThreadExecute",
			Handler:    _Gayway_WebhookThreadExecute_Handler,
		},
		{
			MethodName: "WebhookMessage",
			Handler:    _Gayway_WebhookMessage_Handler,
		},
		{
			MethodName: "WebhookMessageEdit",
			Handler:    _Gayway_WebhookMessageEdit_Handler,
		},
		{
			MethodName: "WebhookMessageDelete",
			Handler:    _Gayway_WebhookMessageDelete_Handler,
		},
		{
			MethodName: "MessageReactionAdd",
			Handler:    _Gayway_MessageReactionAdd_Handler,
		},
		{
			MethodName: "MessageReactionRemove",
			Handler:    _Gayway_MessageReactionRemove_Handler,
		},
		{
			MethodName: "MessageReactionsRemoveAll",
			Handler:    _Gayway_MessageReactionsRemoveAll_Handler,
		},
		{
			MethodName: "MessageReactionsRemoveEmoji",
			Handler:    _Gayway_MessageReactionsRemoveEmoji_Handler,
		},
		{
			MethodName: "MessageReactions",
			Handler:    _Gayway_MessageReactions_Handler,
		},
		{
			MethodName: "MessageThreadStartComplex",
			Handler:    _Gayway_MessageThreadStartComplex_Handler,
		},
		{
			MethodName: "MessageThreadStart",
			Handler:    _Gayway_MessageThreadStart_Handler,
		},
		{
			MethodName: "ThreadStartComplex",
			Handler:    _Gayway_ThreadStartComplex_Handler,
		},
		{
			MethodName: "ThreadStart",
			Handler:    _Gayway_ThreadStart_Handler,
		},
		{
			MethodName: "ForumThreadStartComplex",
			Handler:    _Gayway_ForumThreadStartComplex_Handler,
		},
		{
			MethodName: "ForumThreadStart",
			Handler:    _Gayway_ForumThreadStart_Handler,
		},
		{
			MethodName: "ForumThreadStartEmbed",
			Handler:    _Gayway_ForumThreadStartEmbed_Handler,
		},
		{
			MethodName: "ForumThreadStartEmbeds",
			Handler:    _Gayway_ForumThreadStartEmbeds_Handler,
		},
		{
			MethodName: "ThreadJoin",
			Handler:    _Gayway_ThreadJoin_Handler,
		},
		{
			MethodName: "ThreadLeave",
			Handler:    _Gayway_ThreadLeave_Handler,
		},
		{
			MethodName: "ThreadMemberAdd",
			Handler:    _Gayway_ThreadMemberAdd_Handler,
		},
		{
			MethodName: "ThreadMemberRemove",
			Handler:    _Gayway_ThreadMemberRemove_Handler,
		},
		{
			MethodName: "ThreadMember",
			Handler:    _Gayway_ThreadMember_Handler,
		},
		{
			MethodName: "ThreadMembers",
			Handler:    _Gayway_ThreadMembers_Handler,
		},
		{
			MethodName: "ThreadsActive",
			Handler:    _Gayway_ThreadsActive_Handler,
		},
		{
			MethodName: "GuildThreadsActive",
			Handler:    _Gayway_GuildThreadsActive_Handler,
		},
		{
			MethodName: "ThreadsArchived",
			Handler:    _Gayway_ThreadsArchived_Handler,
		},
		{
			MethodName: "ThreadsPrivateArchived",
			Handler:    _Gayway_ThreadsPrivateArchived_Handler,
		},
		{
			MethodName: "ThreadsPrivateJoinedArchived",
			Handler:    _Gayway_ThreadsPrivateJoinedArchived_Handler,
		},
		{
			MethodName: "ApplicationCommandCreate",
			Handler:    _Gayway_ApplicationCommandCreate_Handler,
		},
		{
			MethodName: "ApplicationCommandEdit",
			Handler:    _Gayway_ApplicationCommandEdit_Handler,
		},
		{
			MethodName: "ApplicationCommandBulkOverwrite",
			Handler:    _Gayway_ApplicationCommandBulkOverwrite_Handler,
		},
		{
			MethodName: "ApplicationCommandDelete",
			Handler:    _Gayway_ApplicationCommandDelete_Handler,
		},
		{
			MethodName: "ApplicationCommand",
			Handler:    _Gayway_ApplicationCommand_Handler,
		},
		{
			MethodName: "ApplicationCommands",
			Handler:    _Gayway_ApplicationCommands_Handler,
		},
		{
			MethodName: "GuildApplicationCommandsPermissions",
			Handler:    _Gayway_GuildApplicationCommandsPermissions_Handler,
		},
		{
			MethodName: "ApplicationCommandPermissions",
			Handler:    _Gayway_ApplicationCommandPermissions_Handler,
		},
		{
			MethodName: "ApplicationCommandPermissionsEdit",
			Handler:    _Gayway_ApplicationCommandPermissionsEdit_Handler,
		},
		{
			MethodName: "ApplicationCommandPermissionsBatchEdit",
			Handler:    _Gayway_ApplicationCommandPermissionsBatchEdit_Handler,
		},
		{
			MethodName: "InteractionRespond",
			Handler:    _Gayway_InteractionRespond_Handler,
		},
		{
			MethodName: "InteractionResponse",
			Handler:    _Gayway_InteractionResponse_Handler,
		},
		{
			MethodName: "InteractionResponseEdit",
			Handler:    _Gayway_InteractionResponseEdit_Handler,
		},
		{
			MethodName: "InteractionResponseDelete",
			Handler:    _Gayway_InteractionResponseDelete_Handler,
		},
		{
			MethodName: "FollowupMessageCreate",
			Handler:    _Gayway_FollowupMessageCreate_Handler,
		},
		{
			MethodName: "FollowupMessageEdit",
			Handler:    _Gayway_FollowupMessageEdit_Handler,
		},
		{
			MethodName: "FollowupMessageDelete",
			Handler:    _Gayway_FollowupMessageDelete_Handler,
		},
		{
			MethodName: "StageInstanceCreate",
			Handler:    _Gayway_StageInstanceCreate_Handler,
		},
		{
			MethodName: "StageInstance",
			Handler:    _Gayway_StageInstance_Handler,
		},
		{
			MethodName: "StageInstanceEdit",
			Handler:    _Gayway_StageInstanceEdit_Handler,
		},
		{
			MethodName: "StageInstanceDelete",
			Handler:    _Gayway_StageInstanceDelete_Handler,
		},
		{
			MethodName: "GuildScheduledEvents",
			Handler:    _Gayway_GuildScheduledEvents_Handler,
		},
		{
			MethodName: "GuildScheduledEvent",
			Handler:    _Gayway_GuildScheduledEvent_Handler,
		},
		{
			MethodName: "GuildScheduledEventCreate",
			Handler:    _Gayway_GuildScheduledEventCreate_Handler,
		},
		{
			MethodName: "GuildScheduledEventEdit",
			Handler:    _Gayway_GuildScheduledEventEdit_Handler,
		},
		{
			MethodName: "GuildScheduledEventDelete",
			Handler:    _Gayway_GuildScheduledEventDelete_Handler,
		},
		{
			MethodName: "GuildScheduledEventUsers",
			Handler:    _Gayway_GuildScheduledEventUsers_Handler,
		},
		{
			MethodName: "AutoModerationRules",
			Handler:    _Gayway_AutoModerationRules_Handler,
		},
		{
			MethodName: "AutoModerationRule",
			Handler:    _Gayway_AutoModerationRule_Handler,
		},
		{
			MethodName: "AutoModerationRuleCreate",
			Handler:    _Gayway_AutoModerationRuleCreate_Handler,
		},
		{
			MethodName: "AutoModerationRuleEdit",
			Handler:    _Gayway_AutoModerationRuleEdit_Handler,
		},
		{
			MethodName: "AutoModerationRuleDelete",
			Handler:    _Gayway_AutoModerationRuleDelete_Handler,
		},
		{
			MethodName: "ApplicationRoleConnectionMetadata",
			Handler:    _Gayway_ApplicationRoleConnectionMetadata_Handler,
		},
		{
			MethodName: "ApplicationRoleConnectionMetadataUpdate",
			Handler:    _Gayway_ApplicationRoleConnectionMetadataUpdate_Handler,
		},
		{
			MethodName: "UserApplicationRoleConnection",
			Handler:    _Gayway_UserApplicationRoleConnection_Handler,
		},
		{
			MethodName: "UserApplicationRoleConnectionUpdate",
			Handler:    _Gayway_UserApplicationRoleConnectionUpdate_Handler,
		},
		{
			MethodName: "HeartbeatLatency",
			Handler:    _Gayway_HeartbeatLatency_Handler,
		},
		{
			MethodName: "UpdateGameStatus",
			Handler:    _Gayway_UpdateGameStatus_Handler,
		},
		{
			MethodName: "UpdateWatchStatus",
			Handler:    _Gayway_UpdateWatchStatus_Handler,
		},
		{
			MethodName: "UpdateStreamingStatus",
			Handler:    _Gayway_UpdateStreamingStatus_Handler,
		},
		{
			MethodName: "UpdateListeningStatus",
			Handler:    _Gayway_UpdateListeningStatus_Handler,
		},
		{
			MethodName: "UpdateStatusComplex",
			Handler:    _Gayway_UpdateStatusComplex_Handler,
		},
		{
			MethodName: "RequestGuildMembers",
			Handler:    _Gayway_RequestGuildMembers_Handler,
		},
		{
			MethodName: "RequestGuildMembersList",
			Handler:    _Gayway_RequestGuildMembersList_Handler,
		},
		{
			MethodName: "RequestGuildMembersBatch",
			Handler:    _Gayway_RequestGuildMembersBatch_Handler,
		},
		{
			MethodName: "RequestGuildMembersBatchList",
			Handler:    _Gayway_RequestGuildMembersBatchList_Handler,
		},
		{
			MethodName: "ChannelVoiceJoinManual",
			Handler:    _Gayway_ChannelVoiceJoinManual_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "output.proto",
}
